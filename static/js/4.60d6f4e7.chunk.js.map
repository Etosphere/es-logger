{"version":3,"sources":["Token.js","Role.js","LogScanner.js","ColorPicker.js","RoleConfigurator.js","SaveToDocxButton.js","LogRender.js","BackToTopButton.js","TreeNode.js","LogParser.js"],"names":["BlockBegin","BlockEnd","Action","Command","Comment","Token","id","tokenType","roleID","content","this","type","Role","name","color","RoleTable","table","nextRoleID","roleArray","Object","values","i","length","roleName","roleType","roleColor","existRoleID","getRoleIdByName","getRandomHSLAColor","minH","maxH","minS","maxS","minL","maxL","minA","maxA","getRandomNumber","low","high","Math","round","random","hue","saturation","lightness","alpha","LogScanner","rawLogData","tokenSequence","header","title","description","kp","dicer","show_command","show_comment","roleTable","rawLogLineArray","split","tokenID","lastRoleName","bufferActionContent","logStartLineNo","trim","rawHeaderContent","jsYaml","load","slice","map","line","filter","forEach","_","bracketContent","match","addRole","push","skipBracketContent","tokenContent","entries","setColor","setType","ColorPicker","props","handleChange","setState","hex","state","variant","popupId","popupState","IconButton","style","padding","edge","component","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","onChange","onChangeComplete","disableAlpha","React","Component","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","width","RoleConfigurator","tempKpList","tempDicerList","role","toString","kpList","dicerList","handleKpChange","bind","handleDicerChange","handleRoleNameChange","handleColorChange","handleRoleFilterChange","handleCommandFilterChange","handleCommentFilterChange","event","tempRoleTable","newKpList","target","value","keys","onRoleTableChange","newDicerList","newRoleName","setName","newRoleColor","tempLogFilter","logFilter","onFilterChange","command","comment","classes","kpTable","getType","dicerTable","pcTable","generateListItem","disabledCheckbox","Grow","in","timeout","mountOnEnter","unmountOnExit","ListItem","justifyContent","ListItemIcon","minWidth","paddingLeft","paddingRight","Checkbox","onClick","checked","disabled","TextField","InputProps","getColor","fullWidth","error","getName","Grid","container","item","xs","align","Fade","FormControl","className","formControl","InputLabel","Select","labelId","multiple","input","Input","renderValue","selected","chips","Chip","label","chip","size","includes","MenuItem","ListItemText","primary","FormHelperText","hidden","List","dense","maxWidth","ListSubheader","disableSticky","lineHeight","Divider","button","marginBottom","Button","endIcon","onSubmit","withStyles","theme","margin","spacing","display","flexWrap","marginTop","marginRight","overflow","noLabel","withTheme","SaveToDocxButton","documentParagraphList","Paragraph","text","heading","HeadingLevel","HEADING_1","children","TextRun","traverseTree","node","depth","Block","substring","Array","isArray","collapsed","roleList","HEADING_2","join","outlineLevel","data","outputDocx","Document","styles","paragraphStyles","basedOn","next","run","bold","paragraph","after","sections","Packer","toBlob","then","blob","FileSaver","saveAs","LogRender","collapsibleNodeArray","expanded","handleToggle","collapseAll","expandAll","initializeCollapsibleNodeArray","iterateTree","nodeId","CustomTreeItem","root","background","group","marginLeft","borderLeft","TreeItem","Typography","whiteSpace","sm","ButtonGroup","TreeView","defaultCollapseIcon","defaultExpanded","defaultExpandIcon","disableSelection","onNodeToggle","renderTree","labelContent","onLabelClick","newExpanded","splice","indexOf","backgroundColor","useStyles","makeStyles","position","bottom","right","ScrollTop","trigger","useScrollTrigger","disableHysteresis","threshold","Zoom","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","BackToTopButton","Fab","addChildNode","parentNode","childNode","ParseTreeNode","SyntaxTreeNode","Start","StartPrime","ACC","LogParser","selectedFile","parseTreeRoot","syntaxTreeRoot","filteredTreeRoot","showRoleConfigurator","showLogRender","handleFileChange","handleFileRead","handleFileUpload","handleRoleTableChange","handleLogFilterChange","filterNodeByRole","tokenIndex","getToken","nextToken","parseStartPrime","token","parseBlock","parseACC","console","log","startNode","parseProgram","rootNode","nodeID","buildFullSyntaxTree","parseTreeNode","syntaxTreeNode","buildChildNode","originNode","buildRootNode","buildSyntaxTreeNode","child","concat","updateRole","Set","sort","roleDict","files","result","logScanner","analyze","parseTree","parse","syntaxTree","buildSyntaxTree","initializeLogFilter","fileReader","FileReader","onload","readAsText","newRoleTable","newLogFilter","reservedRoleArray","parseInt","filteredTree","cloneDeep","traverseFilter","array1","array2","every","isIntersectionEmpty","toDeleteIndex","findIndex","direction","accept","htmlFor","Container"],"mappings":"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","file":"static/js/4.60d6f4e7.chunk.js","sourcesContent":["export const BlockBegin = 'block-begin';\r\nexport const BlockEnd = 'block-end';\r\nexport const Action = 'action';\r\nexport const Command = 'command';\r\nexport const Comment = 'comment';\r\nexport const EOF = 'eof';\r\n\r\nexport default class Token {\r\n  constructor(id, tokenType, roleID, content) {\r\n    this.id = id;\r\n    this.type = tokenType;\r\n    this.roleID = roleID;\r\n    this.content = content;\r\n  }\r\n}","class Role {\r\n  constructor(id, name, type, color) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.type = type;  // \"kp\", \"dicer\", or \"pc\"\r\n    this.color = color;\r\n  }\r\n}\r\n\r\nclass RoleTable {\r\n  constructor() {\r\n    this.table = {};   // {id: Role}\r\n    this.nextRoleID = 0;\r\n  }\r\n\r\n  getName(id) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      return this.table[id].name;\r\n    }\r\n  }\r\n\r\n  setName(id, name) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      this.table[id].name = name;\r\n    }\r\n  }\r\n\r\n  getType(id) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      return this.table[id].type;\r\n    }\r\n  }\r\n\r\n  setType(id, type) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      this.table[id].type = type;\r\n    }\r\n  }\r\n\r\n  getColor(id) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      return this.table[id].color;\r\n    }\r\n  }\r\n\r\n  setColor(id, color) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      this.table[id].color = color;\r\n    }\r\n  }\r\n\r\n  getRoleIdByName(name) {\r\n    let roleArray = Object.values(this.table);\r\n    for (let i = 0; i < roleArray.length; i++) {\r\n      if (roleArray[i].name === name) {\r\n        return roleArray[i].id;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // add a role by its name and type and return its ID,\r\n  // except the name has already occurred in the role table (return its id)\r\n  addRole(roleName, roleType, roleColor) {\r\n    let existRoleID = this.getRoleIdByName(roleName);\r\n    if (existRoleID || existRoleID === 0) {\r\n      return existRoleID;\r\n    } else {\r\n      this.table[this.nextRoleID] = new Role(this.nextRoleID, roleName, roleType, roleColor);\r\n      this.nextRoleID += 1;\r\n      return this.nextRoleID - 1;\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  Role,\r\n  RoleTable,\r\n};","import Token, {BlockBegin, BlockEnd, Action, Command, Comment, EOF} from './Token';\r\nimport {RoleTable} from './Role';\r\nimport jsYaml from \"js-yaml\";\r\n\r\nconst getRandomHSLAColor = (minH, maxH, minS, maxS, minL, maxL, minA, maxA) => {\r\n  const getRandomNumber = (low, high) => {\r\n    return Math.round(Math.random() * (high - low)) + low;\r\n  }\r\n\r\n  let hue = getRandomNumber(minH, maxH);\r\n  let saturation = getRandomNumber(minS, maxS);\r\n  let lightness = getRandomNumber(minL, maxL);\r\n  let alpha = getRandomNumber(minA * 100, maxA * 100) / 100;\r\n\r\n  return `hsl(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\r\n}\r\n\r\nclass LogScanner {\r\n  constructor(rawLogData) {\r\n    this.rawLogData = rawLogData;\r\n    this.tokenSequence = [];\r\n    // empty YAML header\r\n    this.header = {\r\n      title: null,\r\n      description: null,\r\n      color: {},\r\n      kp: null,\r\n      dicer: null,\r\n      show_command: false,\r\n      show_comment: false,\r\n    };\r\n    this.roleTable = new RoleTable();\r\n  }\r\n\r\n  analyze() {\r\n    let rawLogLineArray = this.rawLogData.split('\\n');\r\n    let tokenID = 0;\r\n    let lastRoleName = '';\r\n    let bufferActionContent = '';\r\n    let logStartLineNo = 0;  // the first line index after header\r\n    // handle YAML header\r\n    if (rawLogLineArray[0].trim() === '---') {\r\n      let rawHeaderContent = '';\r\n      for (let i = 1; i < rawLogLineArray.length; i++) {\r\n        if (rawLogLineArray[i].trim() === '---') {\r\n          logStartLineNo = i + 1;\r\n          this.header = jsYaml.load(rawHeaderContent);\r\n        } else {\r\n          rawHeaderContent += rawLogLineArray[i] + '\\n';\r\n        }\r\n      }\r\n    }\r\n    let logLineArray = rawLogLineArray.slice(logStartLineNo)  // ignore header part\r\n      .map((line) => line.trim())    // remove whitespace on both sides of content\r\n      .filter((line) => line);       // remove empty line\r\n    logLineArray.forEach((line, _) => {\r\n      let bracketContent = line.match(/<.+>/);  // <xxx>\r\n      if (bracketContent) {\r\n        if (lastRoleName !== '') {\r\n          let roleID = this.roleTable.addRole(lastRoleName, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n          this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n          bufferActionContent = '';\r\n          lastRoleName = '';\r\n          tokenID += 1;\r\n        }\r\n        bracketContent = bracketContent[0];\r\n        let skipBracketContent = bracketContent.slice(1,\r\n          bracketContent.length - 1);  // <xxx> without <>\r\n        if (skipBracketContent === '{') {\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, BlockBegin, null, null));\r\n        } else if (skipBracketContent === '}') {\r\n          this.tokenSequence.push(new Token(tokenID, BlockEnd, null, null));\r\n        } else {\r\n          let tokenContent = line.split('>')[1].trim();\r\n          let roleID = this.roleTable.addRole(skipBracketContent, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n          if (tokenContent[0] === '(' || tokenContent[0] === '（') {\r\n            this.tokenSequence.push(\r\n              new Token(tokenID, Comment, roleID, tokenContent));\r\n            lastRoleName = '';\r\n          } else if (tokenContent[0] === '.') {\r\n            this.tokenSequence.push(\r\n              new Token(tokenID, Command, roleID, tokenContent));\r\n            lastRoleName = '';\r\n          } else {\r\n            bufferActionContent += tokenContent;\r\n            lastRoleName = skipBracketContent;\r\n            tokenID -= 1;\r\n          }\r\n        }\r\n      } else {\r\n        let roleID = this.roleTable.addRole(lastRoleName, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n        if (line[0] === '(' || line[0] === '（') {\r\n          if (bufferActionContent !== '') {\r\n            this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n            bufferActionContent = '';\r\n            tokenID += 1;\r\n          }\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, Comment, roleID, line));\r\n        } else if (line[0] === '.' || line[0] === '。') {\r\n          if (bufferActionContent !== '') {\r\n            this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n            bufferActionContent = '';\r\n          }\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, Command, roleID, line));\r\n        } else {\r\n          if (bufferActionContent !== '') {\r\n            bufferActionContent += '\\n' + line;\r\n          } else {\r\n            bufferActionContent += line;\r\n          }\r\n          tokenID -= 1;\r\n        }\r\n      }\r\n      tokenID += 1;\r\n    });\r\n    if (bufferActionContent !== '') {\r\n      let roleID = this.roleTable.addRole(lastRoleName, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n      // push action token at last line\r\n      this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n      bufferActionContent = '';\r\n    }\r\n    this.tokenSequence.push(new Token(tokenID + 1, EOF, null, null));\r\n\r\n    // update role colors according to YAML header\r\n    if (this.header.color) {\r\n      Object.entries(this.header.color).forEach(([roleName, color]) => {\r\n        let roleID = this.roleTable.getRoleIdByName(roleName);\r\n        if (roleID !== null) {\r\n          this.roleTable.setColor(roleID, color);\r\n        }\r\n      });\r\n    }\r\n    // set KP according to YAML header\r\n    if (this.header.kp) {\r\n      this.header.kp.forEach((roleName) => {\r\n        let roleID = this.roleTable.getRoleIdByName(roleName);\r\n        if (roleID !== null) {\r\n          this.roleTable.setType(roleID, 'kp');\r\n        }\r\n      });\r\n    }\r\n    // set dicer according to YAML header\r\n    if (this.header.dicer) {\r\n      this.header.dicer.forEach((roleName) => {\r\n        let roleID = this.roleTable.getRoleIdByName(roleName);\r\n        if (roleID !== null) {\r\n          this.roleTable.setType(roleID, 'dicer');\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.tokenSequence;\r\n  }\r\n}\r\n\r\nexport default LogScanner;","import React from 'react';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport FormatColorTextIcon from \"@material-ui/icons/FormatColorText\";\r\nimport PopupState, {bindTrigger, bindPopover} from 'material-ui-popup-state';\r\nimport SketchPicker from \"react-color/lib/Sketch\";\r\n\r\nclass ColorPicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      color: this.props.color\r\n    }\r\n  }\r\n\r\n  handleChange = (color) => {\r\n    this.setState({color: color.hex})\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <PopupState variant=\"popover\" popupId=\"color-picker-popup-popover\">\r\n        {(popupState) => (\r\n          <div>\r\n            <IconButton\r\n              style={{color: this.state.color, padding: 9}}\r\n              edge=\"end\"\r\n              aria-label=\"change color\"\r\n              component=\"span\"\r\n              {...bindTrigger(popupState)}>\r\n              <FormatColorTextIcon/>\r\n            </IconButton>\r\n            <Popover\r\n              {...bindPopover(popupState)}\r\n              anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n              }}\r\n              transformOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n              }}>\r\n              <SketchPicker color={this.state.color}\r\n                            onChange={this.handleChange}\r\n                            onChangeComplete={this.props.onChangeComplete}\r\n                            disableAlpha/>\r\n            </Popover>\r\n          </div>\r\n        )}\r\n      </PopupState>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ColorPicker;","import React from \"react\";\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nconst styles = (theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    maxWidth: 240\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  chip: {\r\n    marginTop: 2,\r\n    marginRight: 2,\r\n    marginBottom: 2,\r\n    maxWidth: 100,\r\n    overflow: \"hidden\",\r\n    label: {\r\n      overflow: \"hidden\",\r\n    }\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3)\r\n  }\r\n});\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 5.5 + ITEM_PADDING_TOP,\r\n      width: 250\r\n    }\r\n  }\r\n};\r\n\r\nclass RoleConfigurator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // initialize kpList and dicerList according to YAML header\r\n    let tempKpList = [];\r\n    let tempDicerList = [];\r\n    Object.values(this.props.roleTable.table).forEach((role) => {\r\n      if (role.type === 'kp') {\r\n        tempKpList.push(role.id.toString());\r\n      } else if (role.type === 'dicer') {\r\n        tempDicerList.push(role.id.toString());\r\n      }\r\n    });\r\n    this.state = {\r\n      kpList: tempKpList,\r\n      dicerList: tempDicerList,\r\n    }\r\n\r\n    this.handleKpChange = this.handleKpChange.bind(this);\r\n    this.handleDicerChange = this.handleDicerChange.bind(this);\r\n    this.handleRoleNameChange = this.handleRoleNameChange.bind(this);\r\n    this.handleColorChange = this.handleColorChange.bind(this);\r\n    this.handleRoleFilterChange = this.handleRoleFilterChange.bind(this);\r\n    this.handleCommandFilterChange = this.handleCommandFilterChange.bind(this);\r\n    this.handleCommentFilterChange = this.handleCommentFilterChange.bind(this);\r\n  }\r\n\r\n  handleKpChange(event) {\r\n    let tempRoleTable = this.props.roleTable;\r\n    let newKpList = event.target.value;\r\n    Object.keys(tempRoleTable.table).forEach((roleID) => {\r\n      tempRoleTable.setType(roleID, 'pc');\r\n    })\r\n    newKpList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'kp');\r\n    });\r\n    this.state.dicerList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'dicer');\r\n    });\r\n    this.setState({\r\n      kpList: newKpList\r\n    }, () => {\r\n      this.props.onRoleTableChange(tempRoleTable);\r\n    });\r\n  }\r\n\r\n  handleDicerChange(event) {\r\n    let tempRoleTable = this.props.roleTable;\r\n    let newDicerList = event.target.value;\r\n    Object.keys(tempRoleTable.table).forEach((roleID) => {\r\n      tempRoleTable.setType(roleID, 'pc');\r\n    })\r\n    this.state.kpList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'kp');\r\n    });\r\n    newDicerList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'dicer');\r\n    });\r\n    this.setState({\r\n      dicerList: newDicerList\r\n    }, () => {\r\n      this.props.onRoleTableChange(tempRoleTable);\r\n    });\r\n  }\r\n\r\n  handleRoleNameChange(roleID, newRoleName) {\r\n    let tempRoleTable = this.props.roleTable;\r\n    tempRoleTable.setName(roleID, newRoleName);\r\n    this.props.onRoleTableChange(tempRoleTable);\r\n  }\r\n\r\n  handleColorChange(roleID, newRoleColor) {\r\n    let tempRoleTable = this.props.roleTable;\r\n    tempRoleTable.setColor(roleID, newRoleColor);\r\n    this.props.onRoleTableChange(tempRoleTable);\r\n  }\r\n\r\n  handleRoleFilterChange(roleID) {\r\n    let tempLogFilter = this.props.logFilter;\r\n    tempLogFilter.role[roleID] = !tempLogFilter.role[roleID];\r\n    this.props.onFilterChange(tempLogFilter);\r\n  }\r\n\r\n  handleCommandFilterChange() {\r\n    let tempLogFilter = this.props.logFilter;\r\n    tempLogFilter.command = !tempLogFilter.command;\r\n    this.props.onFilterChange(tempLogFilter);\r\n    this.setState({logFilter: tempLogFilter});\r\n  }\r\n\r\n  handleCommentFilterChange() {\r\n    let tempLogFilter = this.props.logFilter;\r\n    tempLogFilter.comment = !tempLogFilter.comment;\r\n    this.props.onFilterChange(tempLogFilter);\r\n  }\r\n\r\n  render() {\r\n    const classes = this.props.classes;\r\n\r\n    const kpTable = Object.keys(this.props.roleTable.table)\r\n      .filter((roleID) => this.props.roleTable.getType(roleID) === 'kp');\r\n    const dicerTable = Object.keys(this.props.roleTable.table)\r\n      .filter((roleID) => this.props.roleTable.getType(roleID) === 'dicer');\r\n    const pcTable = Object.keys(this.props.roleTable.table)\r\n      .filter((roleID) => this.props.roleTable.getType(roleID) === 'pc');\r\n\r\n    const generateListItem = (roleID, disabledCheckbox) => (\r\n      <Grow key={roleID} in timeout={1500} mountOnEnter unmountOnExit>\r\n        <ListItem key={roleID} style={{justifyContent: \"center\"}}>\r\n          <ListItemIcon style={{minWidth: 0, paddingLeft: 9, paddingRight: 9}}>\r\n            <Checkbox\r\n              edge=\"start\"\r\n              onClick={() => this.handleRoleFilterChange(roleID)}\r\n              checked={this.props.logFilter.role[roleID]}\r\n              disabled={disabledCheckbox}\r\n            />\r\n          </ListItemIcon>\r\n          <TextField\r\n            id={\"text-field-role\" + roleID}\r\n            color=\"secondary\"\r\n            key={'text-' + roleID}\r\n            InputProps={{\r\n              style: {color: this.props.roleTable.getColor(roleID)}\r\n            }}\r\n            fullWidth\r\n            error={!this.props.roleTable.getName(roleID)}\r\n            value={this.props.roleTable.getName(roleID)}\r\n            onChange={(event) => {\r\n              this.handleRoleNameChange(roleID, event.target.value);\r\n            }}\r\n          />\r\n          <ListItemIcon key={'icon-' + roleID} style={{minWidth: 0, paddingLeft: 9, paddingRight: 9}}>\r\n            <ColorPicker id={roleID}\r\n                         color={this.props.roleTable.getColor(roleID)}\r\n                         onChangeComplete={(color) => {\r\n                           this.handleColorChange(roleID, color.hex)\r\n                         }}/>\r\n          </ListItemIcon>\r\n        </ListItem>\r\n      </Grow>);\r\n\r\n    return ([\r\n      <Grid container key=\"kp-and-dicer-configurator-grid\">\r\n        <Grid item xs align=\"right\">\r\n          <Fade in timeout={1500}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"kp-selection-checkbox-label\">Select KP</InputLabel>\r\n              <Select\r\n                labelId=\"kp-selection-checkbox-label\"\r\n                id=\"kp-selection-checkbox\"\r\n                multiple\r\n                error={this.state.kpList.length === 0}\r\n                value={this.state.kpList}\r\n                onChange={this.handleKpChange}\r\n                input={<Input/>}\r\n                renderValue={(selected) => (\r\n                  <div className={classes.chips}>\r\n                    {selected.map((value) => (\r\n                      <Chip key={value}\r\n                            label={this.props.roleTable.getName(value)}\r\n                            className={classes.chip}\r\n                            size=\"small\"/>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {Object.keys(this.props.roleTable.table).map((roleID) => {\r\n                  if (!this.state.dicerList.includes(roleID)) {\r\n                    return (\r\n                      <MenuItem key={roleID} value={roleID}>\r\n                        <Checkbox checked={this.state.kpList.includes(roleID)}/>\r\n                        <ListItemText primary={this.props.roleTable.getName(roleID)}/>\r\n                      </MenuItem>\r\n                    )\r\n                  } else {\r\n                    return null;\r\n                  }\r\n                })}\r\n              </Select>\r\n              <FormHelperText error hidden={this.state.kpList.length !== 0}>Must set at least one kp.</FormHelperText>\r\n            </FormControl>\r\n          </Fade>\r\n        </Grid>\r\n        <Grid item xs align=\"left\">\r\n          <Fade in timeout={1500}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"dicer-selection-checkbox-label\">Select dicer</InputLabel>\r\n              <Select\r\n                labelId=\"dicer-selection-checkbox-label\"\r\n                id=\"dicer-selection-checkbox\"\r\n                multiple\r\n                error={this.state.dicerList.length === 0}\r\n                value={this.state.dicerList}\r\n                onChange={this.handleDicerChange}\r\n                input={<Input/>}\r\n                renderValue={(selected) => (\r\n                  <div className={classes.chips}>\r\n                    {selected.map((value) => (\r\n                      <Chip key={value}\r\n                            label={this.props.roleTable.getName(value)}\r\n                            className={classes.chip}\r\n                            size=\"small\"/>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {Object.keys(this.props.roleTable.table).map((roleID) => {\r\n                  if (!this.state.kpList.includes(roleID)) {\r\n                    return (\r\n                      <MenuItem key={roleID} value={roleID}>\r\n                        <Checkbox checked={this.state.dicerList.includes(roleID)}/>\r\n                        <ListItemText primary={this.props.roleTable.getName(roleID)}/>\r\n                      </MenuItem>\r\n                    );\r\n                  } else {\r\n                    return null;\r\n                  }\r\n                })}\r\n              </Select>\r\n              <FormHelperText error hidden={this.state.dicerList.length !== 0}>Must set at least one\r\n                dicer.</FormHelperText>\r\n            </FormControl>\r\n          </Fade>\r\n        </Grid>\r\n      </Grid>,\r\n      <Grid container key=\"name-and-color-configurator-grid\">\r\n        <Grid item xs align=\"center\">\r\n          <Fade in timeout={1500}>\r\n            <List dense style={{maxWidth: '360px'}}>\r\n              {kpTable.length !== 0 &&\r\n              <Fade key=\"kp\" in timeout={1500} mountOnEnter unmountOnExit>\r\n                <ListSubheader key=\"kp\" disableSticky style={{lineHeight: '28px'}}>\r\n                  KP\r\n                </ListSubheader>\r\n              </Fade>}\r\n              {kpTable.map((roleID) => generateListItem(roleID, true))}\r\n              {dicerTable.length !== 0 &&\r\n              <Fade key=\"dicer\" in timeout={1500} mountOnEnter unmountOnExit>\r\n                <ListSubheader key=\"dicer\" disableSticky style={{lineHeight: '28px'}}>\r\n                  Dicer\r\n                </ListSubheader>\r\n              </Fade>}\r\n              {dicerTable.map((roleID) => generateListItem(roleID, true))}\r\n              {pcTable.length !== 0 &&\r\n              <Fade key=\"pc\" in timeout={1500} mountOnEnter unmountOnExit>\r\n                <ListSubheader key=\"pc\" disableSticky style={{lineHeight: '28px'}}>\r\n                  PC\r\n                </ListSubheader>\r\n              </Fade>}\r\n              {pcTable.map((roleID) => generateListItem(roleID, false))}\r\n              <Divider key=\"divider\" variant=\"middle\"/>\r\n              <Grow key=\"command-checkbox\" in timeout={1500} mountOnEnter unmountOnExit>\r\n                <ListItem key='command' button onClick={this.handleCommandFilterChange}>\r\n                  <ListItemIcon key='command-icon'>\r\n                    <Checkbox\r\n                      key='command-checkbox'\r\n                      edge=\"start\"\r\n                      checked={this.props.logFilter.command}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText id='label-command' key='label-command' primary='Show Command'/>\r\n                </ListItem>\r\n              </Grow>\r\n              <Grow key=\"comment-checkbox\" in timeout={1500} mountOnEnter unmountOnExit>\r\n                <ListItem key='comment' button onClick={this.handleCommentFilterChange}>\r\n                  <ListItemIcon key='comment-icon'>\r\n                    <Checkbox\r\n                      key='comment-checkbox'\r\n                      edge=\"start\"\r\n                      checked={this.props.logFilter.comment}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText id='label-comment' key='label-comment' primary='Show Comment'/>\r\n                </ListItem>\r\n              </Grow>\r\n            </List>\r\n          </Fade>\r\n        </Grid>\r\n      </Grid>,\r\n      <Grid container key=\"apply-button-grid\" style={{marginBottom: \"1em\"}}>\r\n        <Grid item xs align=\"center\">\r\n          <Button\r\n            key=\"render-button\"\r\n            variant={this.state.kpList.length === 0 && this.state.dicerList.length === 0 ? \"outlined\" : \"contained\"}\r\n            color=\"secondary\"\r\n            disabled={this.state.kpList.length === 0 || this.state.dicerList.length === 0}\r\n            endIcon={<DescriptionIcon/>}\r\n            onClick={this.props.onSubmit}>\r\n            Render\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    ]);\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(RoleConfigurator);","import {Document, HeadingLevel, Packer, Paragraph, TextRun} from 'docx';\r\nimport Button from '@material-ui/core/Button';\r\nimport FileSaver from 'file-saver';\r\nimport {Block} from './LogParser';\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\n\r\n\r\nexport default function SaveToDocxButton(props) {\r\n  let documentParagraphList = [];\r\n  if (props.header.title) {\r\n    documentParagraphList.push(new Paragraph({\r\n      text: props.header.title,\r\n      heading: HeadingLevel.HEADING_1\r\n    }));\r\n  }\r\n  if (props.header.description) {\r\n    props.header.description.split('\\n').forEach((line) => {\r\n      documentParagraphList.push(new Paragraph({\r\n        children: [\r\n          new TextRun({\r\n            text: line.trim(),\r\n            color: '666666'\r\n          })\r\n        ]\r\n      }))\r\n    });\r\n  }\r\n\r\n  const traverseTree = (node, depth) => {\r\n    if (node.type !== Block) {\r\n      if (node.content) {\r\n        documentParagraphList.push(new Paragraph({\r\n          children: [new TextRun({\r\n            text: `<${props.roleTable.getName(node.role)}> ${node.content}`,\r\n            color: props.roleTable.getColor(node.role).substring(1)\r\n          })]\r\n        }));\r\n      }\r\n    } else {\r\n      if (Array.isArray(node.children)) {\r\n        if (node.collapsed) {\r\n          let roleList = node.role.map((roleID) => {\r\n            if (props.roleTable.getType(roleID) === 'pc') {\r\n              return props.roleTable.getName(roleID)\r\n            } else {\r\n              return null;\r\n            }\r\n          }).filter((roleName) => roleName);\r\n          documentParagraphList.push(new Paragraph({\r\n            heading: HeadingLevel.HEADING_2,\r\n            text: `{${roleList.join(', ')}}`,\r\n            outlineLevel: depth + 1,\r\n          }));\r\n          node.children.forEach((node) => traverseTree(node, depth + 1));\r\n        } else {\r\n          node.children.forEach((node) => traverseTree(node, depth));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  traverseTree(props.data, 0);\r\n\r\n  let outputDocx = new Document({\r\n    styles: {\r\n      paragraphStyles: [{\r\n        id: \"Heading1\",\r\n        name: \"Heading 1\",\r\n        basedOn: \"Normal\",\r\n        next: \"Normal\",\r\n        run: {\r\n          bold: true,\r\n          size: 32,\r\n          color: \"000000\",\r\n        },\r\n        paragraph: {\r\n          spacing: {\r\n            after: 120\r\n          },\r\n        },\r\n      }, {\r\n        id: \"Heading2\",\r\n        name: \"Heading 2\",\r\n        basedOn: \"Normal\",\r\n        next: \"Normal\",\r\n        run: {\r\n          size: 26,\r\n          color: \"888888\",\r\n        },\r\n      }, {\r\n        id: \"Normal\",\r\n        name: \"Normal\",\r\n        basedOn: \"Normal\",\r\n        next: \"Normal\",\r\n        run: {\r\n          size: 24,\r\n        },\r\n        paragraph: {\r\n          spacing: {\r\n            line: 288,\r\n          },\r\n        },\r\n      }]\r\n    },\r\n    sections: [{\r\n      children: documentParagraphList,\r\n    }],\r\n  });\r\n\r\n  return (\r\n    <Button\r\n      color=\"secondary\"\r\n      variant=\"outlined\"\r\n      size=\"small\"\r\n      style={{marginBottom: \"2px\"}}\r\n      endIcon={<SaveAltIcon/>}\r\n      onClick={() => {\r\n        Packer.toBlob(outputDocx).then((blob) => {\r\n          // saveAs from FileSaver will download the file\r\n          FileSaver.saveAs(blob, props.header.title ? props.header.title + '.docx' : 'rendered-log.docx');\r\n        });\r\n      }}>\r\n      Save to docx\r\n    </Button>\r\n  );\r\n}","import React from 'react';\r\nimport {Block} from './LogParser';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport SaveToDocxButton from './SaveToDocxButton';\r\n\r\nconst styles = (theme) => ({\r\n  \"@global\": {\r\n    \".MuiTreeItem-root.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n      backgroundColor: \"white\"\r\n    },\r\n    \".MuiTreeItem-root.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label:hover, .MuiTreeItem-root.Mui-selected:focus > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n      backgroundColor: \"gray\"\r\n    }\r\n  }\r\n});\r\n\r\nclass LogRender extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.collapsibleNodeArray = [];\r\n    this.state = {\r\n      expanded: [],\r\n    }\r\n\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n    this.collapseAll = this.collapseAll.bind(this);\r\n    this.expandAll = this.expandAll.bind(this);\r\n\r\n    this.initializeCollapsibleNodeArray();\r\n  }\r\n\r\n  initializeCollapsibleNodeArray() {\r\n    const iterateTree = (node) => {\r\n      if (node.type === Block && Array.isArray(node.children)) {\r\n        if (node.collapsed) {\r\n          this.collapsibleNodeArray.push(node.id.toString());\r\n        }\r\n        node.children.forEach((node) => iterateTree(node));\r\n      }\r\n    }\r\n    iterateTree(this.props.node);\r\n  }\r\n\r\n  handleToggle(event, nodeId) {\r\n    this.setState({expanded: nodeId});\r\n  }\r\n\r\n  collapseAll() {\r\n    this.setState({expanded: []});\r\n  }\r\n\r\n  expandAll() {\r\n    this.setState({expanded: this.collapsibleNodeArray});\r\n  }\r\n\r\n  render() {\r\n    const classes = this.props.classes;\r\n\r\n    const CustomTreeItem = withStyles({\r\n      root: {\r\n        // \"&.MuiTreeItem-root.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label:hover\": {\r\n        //   background: \"transparent\"\r\n        // },\r\n        // \"&.MuiTreeItem-root.Mui-selected:focus > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n        //   background: \"transparent\"\r\n        // },\r\n        \"&.MuiTreeItem-root:focus > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n          background: \"transparent\"\r\n        },\r\n        \"&.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n          background: \"transparent\"\r\n        },\r\n        \"&.MuiTreeItem-root > .MuiTreeItem-content:hover\": {\r\n          background: \"transparent\"\r\n        },\r\n        \"&.MuiTreeItem-root > .MuiTreeItem-content:hover > .MuiTreeItem-label\": {\r\n          background: \"transparent\"\r\n        }\r\n      },\r\n      group: {\r\n        marginLeft: 7,\r\n        paddingLeft: 18,\r\n        borderLeft: \"1px dashed #33333333\",\r\n      },\r\n    })(TreeItem);\r\n\r\n    const renderTree = (node) => {\r\n      if (node.type !== Block) {\r\n        if (node.content) {\r\n          return <Typography key={node.id}\r\n                             style={{color: this.props.roleTable.getColor(node.role), whiteSpace: \"pre-line\"}}>\r\n            {`<${this.props.roleTable.getName(node.role)}> ${node.content}`}\r\n          </Typography>;\r\n        }\r\n      } else {\r\n        if (Array.isArray(node.children)) {\r\n          if (node.collapsed) {\r\n            let roleList = node.role.map((roleID) => {\r\n              if (this.props.roleTable.getType(roleID) === 'pc') {\r\n                return this.props.roleTable.getName(roleID)\r\n              } else {\r\n                return null;\r\n              }\r\n            }).filter((roleName) => roleName);\r\n            let labelContent = <Typography\r\n              style={{color: \"#a2a2a2\"}}>{`{${roleList.join(', ')}}`}</Typography>;\r\n            return (\r\n              <CustomTreeItem key={node.id} nodeId={node.id.toString()} label={labelContent}>\r\n                {node.children.map((node) => renderTree(node))}\r\n                <CustomTreeItem key={node.id.toString() + '-collapse'}\r\n                                nodeId={node.id.toString() + '-collapse'}\r\n                                label={<Typography style={{color: \"#a2a2a2\"}}>{'Click to Collapse'}</Typography>}\r\n                                endIcon={<ExpandLessIcon/>}\r\n                                onLabelClick={(event) => {\r\n                                  let newExpanded = this.state.expanded;\r\n                                  newExpanded.splice(newExpanded.indexOf(node.id.toString()), 1);\r\n                                  this.handleToggle(event, newExpanded);\r\n                                }}/>\r\n              </CustomTreeItem>\r\n            );\r\n          } else {\r\n            return node.children.map((node) => renderTree(node));\r\n          }\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.props.node) {\r\n      return ([\r\n        this.props.header.title &&\r\n        <Typography key=\"title\" variant=\"h4\" style={{marginTop: \"16px\", marginBottom: \"16px\"}}>\r\n          {this.props.header.title}\r\n        </Typography>,\r\n        this.props.header.description &&\r\n        <Typography key=\"description\" variant=\"subtitle1\" style={{\r\n          whiteSpace: \"pre-line\",\r\n          marginBottom: \"16px\",\r\n          paddingLeft: \"2em\",\r\n          paddingRight: \"2em\",\r\n          color: \"#888888\"\r\n        }}>{this.props.header.description}</Typography>,\r\n        <Grid key=\"buttons-grid\" container spacing={2} style={{marginBottom: '12px'}}>\r\n          <Grid key=\"expand-and-collapse-button-group\" item xs={12} sm={8}>\r\n            <ButtonGroup key=\"button-group\" variant=\"outlined\" size=\"small\" color=\"primary\">\r\n              <Button onClick={this.expandAll}>Expand all</Button>\r\n              <Button onClick={this.collapseAll}>Collapse all</Button>\r\n            </ButtonGroup>\r\n          </Grid>\r\n          <Grid key=\"save-to-docx-button\" item xs={12} sm={4} align=\"right\">\r\n            <SaveToDocxButton key=\"save-to-docx-button\" data={this.props.node} roleTable={this.props.roleTable}\r\n                            header={this.props.header}/>\r\n          </Grid>\r\n        </Grid>,\r\n        <TreeView\r\n          className={classes.root}\r\n          key=\"render-tree\"\r\n          defaultCollapseIcon={<ExpandMoreIcon/>}\r\n          defaultExpanded={['root']}\r\n          defaultExpandIcon={<ChevronRightIcon/>}\r\n          disableSelection\r\n          expanded={this.state.expanded}\r\n          onNodeToggle={this.handleToggle}\r\n          style={{marginBottom: \"48px\"}}\r\n        >\r\n          {renderTree(this.props.node)}\r\n        </TreeView>\r\n      ]);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(LogRender);","import React from \"react\";\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    position: \"fixed\",\r\n    bottom: theme.spacing(3),\r\n    right: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nfunction ScrollTop(props) {\r\n  const { children } = props;\r\n  const classes = useStyles();\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 100\r\n  });\r\n\r\n  const handleClick = (event) => {\r\n    const anchor = (event.target.ownerDocument || document).querySelector(\r\n      \"#back-to-top-anchor\"\r\n    );\r\n    if (anchor) {\r\n      anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Zoom in={trigger}>\r\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\r\n        {children}\r\n      </div>\r\n    </Zoom>\r\n  );\r\n}\r\n\r\nexport default function BackToTopButton(props) {\r\n  return (\r\n    <ScrollTop {...props}>\r\n      <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\r\n        <KeyboardArrowUpIcon/>\r\n      </Fab>\r\n    </ScrollTop>\r\n  );\r\n}\r\n","export const addChildNode = (parentNode, childNode) => {\r\n  return parentNode.children.push(childNode);\r\n}\r\n\r\nexport class ParseTreeNode {\r\n  constructor(type, content) {\r\n    this.type = type;\r\n    this.content = content;\r\n    this.children = [];\r\n  }\r\n}\r\n\r\nexport class SyntaxTreeNode {\r\n  constructor(id, type, role, content) {\r\n    this.id = id;\r\n    this.type = type;\r\n    this.role = role;\r\n    this.content = content;\r\n    this.children = [];\r\n  }\r\n}","import React from 'react';\r\nimport _ from 'lodash';\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport LogScanner from './LogScanner';\r\nimport * as Token from './Token';\r\nimport RoleConfigurator from \"./RoleConfigurator\";\r\nimport LogRender from \"./LogRender\";\r\nimport BackToTopButton from \"./BackToTopButton\";\r\nimport {addChildNode, ParseTreeNode, SyntaxTreeNode} from './TreeNode';\r\n\r\nexport const Start = 'Start';\r\nexport const StartPrime = \"Start'\";\r\nexport const Block = 'Block';\r\nexport const BlockBegin = 'block-begin';\r\nexport const BlockEnd = 'block-end';\r\nexport const ACC = 'ACC';\r\nexport const Action = 'action';\r\nexport const Command = 'command';\r\nexport const Comment = 'comment';\r\n\r\nclass LogParser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.header = {\r\n      show_command: false,\r\n      show_comment: false\r\n    };\r\n    this.state = {\r\n      selectedFile: null,\r\n      parseTreeRoot: null,\r\n      syntaxTreeRoot: null,\r\n      filteredTreeRoot: null,\r\n      roleTable: null,\r\n      logFilter: {},   // e.g.: {\"role\": {0: true, 1: false, ...}], \"command\": true, \"comment\": true}\r\n      showRoleConfigurator: false,\r\n      // showLogFilter: false,\r\n      showLogRender: false,\r\n    };\r\n\r\n    this.handleFileChange = this.handleFileChange.bind(this);\r\n    this.handleFileRead = this.handleFileRead.bind(this);\r\n    this.handleFileUpload = this.handleFileUpload.bind(this);\r\n    this.handleRoleTableChange = this.handleRoleTableChange.bind(this);\r\n    this.handleLogFilterChange = this.handleLogFilterChange.bind(this);\r\n    this.filterNodeByRole = this.filterNodeByRole.bind(this);\r\n  }\r\n\r\n  // syntax:\r\n  //\r\n  // Start -> Block Start' | ACC Start'\r\n  // Start' -> Block Start' | ACC Start' | empty\r\n  // Block -> block-begin Start' block-end\r\n  // ACC -> action | command | comment\r\n  parse(tokenSequence) {\r\n    let tokenIndex = 0;\r\n    const getToken = () => tokenSequence[tokenIndex];\r\n    const nextToken = () => tokenIndex += 1;\r\n\r\n    let parseProgram = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        addChildNode(node, new ParseTreeNode(Block, null));\r\n        if (parseBlock(node.children[0])) {\r\n          addChildNode(node, new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else if (token.type === Token.Action || token.type === Token.Command ||\r\n        token.type === Token.Comment) {\r\n        addChildNode(node, new ParseTreeNode(ACC, null));\r\n        if (parseACC(node.children[0])) {\r\n          addChildNode(node, new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else {\r\n        console.log(`Error parsing at ${token}.`);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    let parseStartPrime = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        addChildNode(node, new ParseTreeNode(Block, null));\r\n        if (parseBlock(node.children[0])) {\r\n          addChildNode(node, new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else if (token.type === Token.Action || token.type === Token.Command ||\r\n        token.type === Token.Comment) {\r\n        addChildNode(node, new ParseTreeNode(ACC, null));\r\n        if (parseACC(node.children[0])) {\r\n          addChildNode(node, new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else {\r\n        return true;    // for Start' -> empty\r\n      }\r\n    };\r\n\r\n    let parseBlock = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        addChildNode(node, new ParseTreeNode(BlockBegin, token));\r\n        nextToken();\r\n        addChildNode(node, new ParseTreeNode(StartPrime, null));\r\n        if (parseStartPrime(node.children[1])) {\r\n          addChildNode(node, new ParseTreeNode(BlockEnd, getToken()));\r\n          if (getToken().type === Token.BlockEnd) {\r\n            nextToken();\r\n            return true;\r\n          } else {\r\n            console.log(\r\n              `Error parsing at ${getToken()}, should be <block-end>.`);\r\n          }\r\n        }\r\n      } else {\r\n        console.log(`Error parsing at ${getToken()}, should be <block-begin>.`);\r\n      }\r\n    };\r\n\r\n    let parseACC = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.Action) {\r\n        addChildNode(node, new ParseTreeNode(Action, token));\r\n        nextToken();\r\n        return true;\r\n      } else if (token.type === Token.Command) {\r\n        addChildNode(node, new ParseTreeNode(Command, token));\r\n        nextToken();\r\n        return true;\r\n      } else if (token.type === Token.Comment) {\r\n        addChildNode(node, new ParseTreeNode(Comment, token));\r\n        nextToken();\r\n        return true;\r\n      } else {\r\n        console.log(\r\n          `Error parsing at ${token}, should be <action> or <command> or <comment>.`);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    let startNode = new ParseTreeNode(Start);\r\n    if (parseProgram(startNode)) {\r\n      return startNode;\r\n    } else {\r\n      console.log('Failed to parse the code.');\r\n    }\r\n  }\r\n\r\n  buildSyntaxTree(rootNode) {\r\n    let nodeID = 1;\r\n    let buildSyntaxTreeNode = (originNode, buildRootNode) => {\r\n      if (originNode.type === Block) {\r\n        addChildNode(buildRootNode, new SyntaxTreeNode(nodeID, Block, [], null));\r\n      } else if (originNode.type === Action || originNode.type === Command ||\r\n        originNode.type === Comment) {\r\n        addChildNode(buildRootNode,\r\n          new SyntaxTreeNode(nodeID, originNode.type, originNode.content.roleID,\r\n            originNode.content.content));\r\n      } else {\r\n        // do nothing\r\n        return false;\r\n      }\r\n      nodeID += 1;\r\n      return buildRootNode.children[buildRootNode.children.length - 1];\r\n    };\r\n\r\n    let buildFullSyntaxTree = (parseTreeNode, syntaxTreeNode) => {\r\n      if (parseTreeNode) {\r\n        let buildChildNode = buildSyntaxTreeNode(parseTreeNode, syntaxTreeNode);\r\n        if (buildChildNode) {\r\n          parseTreeNode.children.forEach(\r\n            (child, _) => buildFullSyntaxTree(child, buildChildNode));\r\n        } else {\r\n          parseTreeNode.children.forEach(\r\n            (child, _) => buildFullSyntaxTree(child, syntaxTreeNode));\r\n        }\r\n      }\r\n    };\r\n\r\n    let syntaxTreeRoot = new SyntaxTreeNode(0, Block, [], null);  // global block containing all roles\r\n    buildFullSyntaxTree(rootNode, syntaxTreeRoot);\r\n    return syntaxTreeRoot;\r\n  }\r\n\r\n  // traverse syntax tree in post order to update \"role\" in Block nodes\r\n  updateRole(rootNode) {\r\n    if (rootNode) {\r\n      if (rootNode.type === Block) {\r\n        let roleArray = rootNode.role;\r\n        rootNode.children.forEach(\r\n          (child, _) => roleArray = roleArray.concat(this.updateRole(child)));\r\n        rootNode.role = [...new Set(roleArray)].sort();\r\n      }\r\n      return rootNode.role;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  initializeLogFilter() {\r\n    let roleDict = {};\r\n    this.state.syntaxTreeRoot.role.forEach((role) => roleDict[role] = true);\r\n    return {\r\n      'role': roleDict,\r\n      'command': this.header.show_command, // according to show_command in YAML header, default value is false\r\n      'comment': this.header.show_comment, // according to show_comment in YAML header, default value is false\r\n    };\r\n  }\r\n\r\n  handleFileChange(event) {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n      parseTreeRoot: null,\r\n      syntaxTreeRoot: null,\r\n      filteredTreeRoot: null,\r\n      roleTable: null,\r\n      logFilter: {},\r\n      showRoleConfigurator: false,\r\n      showLogRender: false,\r\n    });\r\n  }\r\n\r\n  handleFileRead(event) {\r\n    let content = event.target.result;\r\n    let logScanner = new LogScanner(content);\r\n    let tokenSequence = logScanner.analyze();\r\n    this.header = logScanner.header;\r\n    let parseTree = this.parse(tokenSequence);\r\n    let syntaxTree = this.buildSyntaxTree(parseTree);\r\n    this.setState({\r\n      parseTreeRoot: parseTree,\r\n      syntaxTreeRoot: syntaxTree,\r\n      roleTable: logScanner.roleTable,\r\n    }, () => {\r\n      this.updateRole(this.state.syntaxTreeRoot);\r\n      let logFilter = this.initializeLogFilter();\r\n      this.setState({logFilter: logFilter, showRoleConfigurator: true});\r\n    });\r\n  }\r\n\r\n  handleFileUpload() {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = this.handleFileRead;\r\n    fileReader.readAsText(this.state.selectedFile);\r\n  }\r\n\r\n  handleRoleTableChange(newRoleTable) {\r\n    this.setState({roleTable: newRoleTable});\r\n  }\r\n\r\n  handleLogFilterChange(newLogFilter) {\r\n    this.setState({logFilter: newLogFilter});\r\n  }\r\n\r\n  // post-order traversal to delete nodes add update collapse states according to role filter checkboxes\r\n  // deletion rule:\r\n  //   1. If none of the reserved roles appear in the Block (except kp and dicer), delete the Block (and its children) node.\r\n  //   2. If is a action / command / comment node and is filtered out according to the checkboxes, delete it.\r\n  // collapsing rule:\r\n  //   If there exists a reserved role that does not appear in the Block node, collapse the node.\r\n  filterNodeByRole() {\r\n    // get all reserved roles from rileFilter\r\n    let reservedRoleArray = [];\r\n    Object.keys(this.state.logFilter.role).forEach((roleID) => {\r\n      if (this.state.roleTable.getType(roleID) === 'pc' && this.state.logFilter.role[roleID]) {\r\n        reservedRoleArray.push(roleID);\r\n      }\r\n    });\r\n    reservedRoleArray = reservedRoleArray.map((roleID) => parseInt(roleID));\r\n\r\n    let isIntersectionEmpty = (array1, array2) => {\r\n      return !array1.map((item) => array2.includes(item)).includes(true);\r\n    };\r\n\r\n    let isSubsetOf = (array1, array2) => {\r\n      return array1.every((value) => array2.includes(value));\r\n    }\r\n\r\n    let filteredTree = _.cloneDeep(this.state.syntaxTreeRoot);\r\n\r\n    let traverseFilter = (node, parentNode) => {\r\n      if (node) {\r\n        // make a clone to prevent wrong index made by deletion in iteration\r\n        node.children.slice(0)\r\n          .forEach((child, _) => traverseFilter(child, node));\r\n        if (node.type === Block) {\r\n          node.collapsed = !isSubsetOf(reservedRoleArray, node.role);\r\n          if ((node.children.length === 0 && parentNode) ||\r\n            isIntersectionEmpty(node.role, reservedRoleArray)) {\r\n            // Block is empty or no reserved roles appear\r\n            let toDeleteIndex = parentNode.children.findIndex(\r\n              (child) => child.id === node.id);\r\n            parentNode.children.splice(toDeleteIndex, 1);\r\n            node = null;\r\n          }\r\n        } else {\r\n          node.collapsed = false;\r\n          // check for filtering command / comment\r\n          if ((node.type === Command && (!this.state.logFilter.command)) ||\r\n            (node.type === Comment && (!this.state.logFilter.comment))) {\r\n            let toDeleteIndex = parentNode.children.findIndex(\r\n              (child) => child.id === node.id);\r\n            parentNode.children.splice(toDeleteIndex, 1);\r\n            node = null;\r\n          }\r\n        }\r\n      }\r\n    };\r\n    traverseFilter(filteredTree, null);\r\n    this.updateRole(filteredTree);\r\n    this.setState({filteredTreeRoot: filteredTree, showLogRender: true});\r\n  }\r\n\r\n  render() {\r\n    return ([\r\n      <div id=\"back-to-top-anchor\" key=\"back-to-top-anchor\"/>,\r\n      <BackToTopButton key=\"back-to-top-button\"/>,\r\n      <Grid key=\"handle-file-grid\" container spacing={1} direction=\"column\" style={{marginBottom: 24}}>\r\n        <Grid item xs align=\"center\">\r\n          <input\r\n            hidden\r\n            id=\"contained-button-file\"\r\n            accept=\"text/plain,.log\"\r\n            type=\"file\"\r\n            onChange={this.handleFileChange}\r\n          />\r\n          <label htmlFor=\"contained-button-file\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              endIcon={<PublishIcon/>}\r\n            >\r\n              Browse\r\n            </Button>\r\n          </label>\r\n        </Grid>\r\n        {this.state.selectedFile &&\r\n        <Fade in timeout={1500}>\r\n          <Grid item xs align=\"center\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              endIcon={<SendIcon/>}\r\n              onClick={this.handleFileUpload}>\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n        </Fade>}\r\n      </Grid>,\r\n      <Grid container key=\"role-configurator-grid\">\r\n        {this.state.showRoleConfigurator &&\r\n        <RoleConfigurator key=\"role-configurator\"\r\n                          roleTable={_.cloneDeep(this.state.roleTable)}\r\n                          logFilter={this.state.logFilter}\r\n                          header={this.header}\r\n                          onRoleTableChange={this.handleRoleTableChange}\r\n                          onFilterChange={this.handleLogFilterChange}\r\n                          onSubmit={this.filterNodeByRole}/>\r\n        }\r\n      </Grid>,\r\n      <Divider hidden={!this.state.showLogRender} key=\"divider\"/>,\r\n      // <Grid container key=\"role-filter-grid\">\r\n      //   {this.state.showLogFilter &&\r\n      //   <LogFilter key=\"filter\"\r\n      //              logFilter={this.state.logFilter}\r\n      //              roleTable={this.state.roleTable}\r\n      //              onSubmit={this.filterNodeByRole}/>\r\n      //   }\r\n      // </Grid>,\r\n      <Container key=\"log-render-container\" maxWidth=\"md\">\r\n        {this.state.showLogRender &&\r\n        <LogRender key=\"render\"\r\n                   node={this.state.filteredTreeRoot}\r\n                   roleTable={this.state.roleTable}\r\n                   header={this.header}/>}\r\n      </Container>\r\n    ]);\r\n  }\r\n}\r\n\r\nexport default LogParser;"],"sourceRoot":""}