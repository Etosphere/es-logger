{"version":3,"sources":["TopAppBar.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["HideOnScroll","props","children","trigger","useScrollTrigger","Slide","appear","direction","in","TopAppBar","AppBar","style","backgroundColor","color","Toolbar","Typography","variant","theme","createTheme","overrides","MuiCssBaseline","body","height","minHeight","width","fontFamily","code","footer","padding","marginTop","textAlign","Grid","alignItems","justifyContent","MuiDivider","root","margin","palette","primary","main","secondary","LogParserComponent","React","lazy","LoadingComponent","Backdrop","open","CircularProgress","SuspenseComponent","fallback","Container","maxWidth","App","ThemeProvider","CssBaseline","id","className","Link","href","fontSize","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a24eff45.chunk.js","sourcesContent":["import AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nfunction HideOnScroll(props) {\r\n  const { children } = props;\r\n  // Note that you normally won't need to set the window ref as useScrollTrigger\r\n  // will default to window.\r\n  // This is only being set here because the demo is in an iframe.\r\n  const trigger = useScrollTrigger();\r\n\r\n  return (\r\n    <Slide appear={false} direction=\"down\" in={!trigger}>\r\n      {children}\r\n    </Slide>\r\n  );\r\n}\r\n\r\nexport default function TopAppBar(props) {\r\n  return (\r\n    <>\r\n      <HideOnScroll {...props}>\r\n        <AppBar style={{backgroundColor: \"#f7d774\", color: \"#5f5f5f\"}}>\r\n        {/* <AppBar elevation={0} color=\"transparent\"> */}\r\n          <Toolbar>\r\n            <Typography variant=\"h6\">ES Logger</Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </HideOnScroll>\r\n      <Toolbar />\r\n    </>\r\n  );\r\n}","import React, {Suspense} from 'react';\r\nimport createTheme from \"@material-ui/core/styles/createTheme\";\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport TopAppBar from './TopAppBar';\r\n\r\nconst theme = createTheme({\r\n  overrides: {\r\n    MuiCssBaseline: {\r\n      \"@global\": {\r\n        body: {\r\n          height: \"100%\",\r\n          minHeight: \"100%\",\r\n          width: \"100%\",\r\n          fontFamily: \"-apple-system, 'Helvetica Neue', Helvetica ,Arial, 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', 'Microsoft Yahei', sans-serif\",\r\n          '-webkit-font-smoothing': 'antialiased',\r\n          '-moz-osx-font-smoothing': 'grayscale',\r\n        },\r\n        code: {\r\n          fontFamily: \"source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace\",\r\n        },\r\n        footer: {\r\n          padding: \"1.5em\",\r\n          marginTop: \"auto\",\r\n          width: \"100%\",\r\n          textAlign: \"center\"\r\n        }\r\n      }\r\n    },\r\n    Grid: {\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\"\r\n    },\r\n    MuiDivider: {\r\n      root: {\r\n        margin: \"12px\"\r\n      }\r\n    }\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: \"#717bd6\",\r\n    },\r\n    secondary: {\r\n      main: \"#e8618c\",\r\n    },\r\n  },\r\n});\r\n\r\nconst LogParserComponent = React.lazy(() => import('./LogParser'));\r\n\r\nconst LoadingComponent = () => (\r\n  <Backdrop open>\r\n    <CircularProgress color=\"inherit\" />\r\n  </Backdrop>\r\n);\r\n\r\nconst SuspenseComponent = () => (\r\n  <Suspense fallback={LoadingComponent}>\r\n    <Container maxWidth=\"md\" style={{minHeight: \"82vh\", marginTop: '2em'}}>\r\n      <LogParserComponent/>\r\n    </Container>\r\n  </Suspense>\r\n)\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline/>\r\n      <TopAppBar/>\r\n      <SuspenseComponent/>\r\n      <footer id=\"footer\" className=\"footer\">\r\n        <Link href=\"https://github.com/etosphere/es-logger\" style={{color: \"#907da2\"}}>\r\n          <GitHubIcon fontSize=\"small\"/>\r\n        </Link>\r\n        <div style={{color: \"#907da2\"}}>Â©&nbsp;2021&nbsp;ES</div>\r\n      </footer>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}