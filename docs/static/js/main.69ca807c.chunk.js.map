{"version":3,"sources":["Token.js","Role.js","LogScanner.js","ColorPicker.js","RoleConfigurator.js","LogRender.js","BackToTopButton.js","LogParser.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["BlockBegin","Symbol","BlockEnd","Action","Command","Comment","EOF","Token","id","tokenType","roleID","content","this","type","Role","name","color","RoleTable","table","nextRoleID","roleArray","Object","values","i","length","roleName","roleType","roleColor","existRoleID","getRoleIdByName","getRandomHSLAColor","minH","maxH","minS","maxS","minL","maxL","minA","maxA","getRandomNumber","low","high","Math","round","random","hue","saturation","lightness","alpha","LogScanner","rawLogData","tokenSequence","header","title","kp","dicer","show_command","show_comment","roleTable","rawLogLineArray","split","tokenID","lastRoleName","bufferActionContent","logStartLineNo","trim","rawHeaderContent","jsYaml","load","slice","map","line","filter","forEach","_","bracketContent","match","addRole","push","skipBracketContent","tokenContent","entries","setColor","setType","ColorPicker","props","handleChange","setState","hex","state","variant","popupId","popupState","IconButton","style","padding","edge","component","bindTrigger","FormatColorText","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","onChange","onChangeComplete","React","Component","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","width","RoleConfigurator","tempKpList","tempDicerList","role","toString","kpList","dicerList","handleKpChange","bind","handleDicerChange","handleRoleNameChange","handleColorChange","handleRoleFilterChange","handleCommandFilterChange","handleCommentFilterChange","event","tempRoleTable","newKpList","target","value","keys","onRoleTableChange","newDicerList","newRoleName","setName","newRoleColor","tempLogFilter","logFilter","onFilterChange","command","comment","classes","kpTable","getType","dicerTable","pcTable","generateListItem","disabledCheckbox","Grow","in","timeout","mountOnEnter","unmountOnExit","ListItem","justifyContent","ListItemIcon","minWidth","paddingLeft","paddingRight","Checkbox","onClick","checked","disabled","TextField","InputProps","getColor","fullWidth","error","getName","console","log","Grid","container","item","xs","align","Fade","FormControl","className","formControl","InputLabel","Select","labelId","multiple","input","Input","renderValue","selected","chips","Chip","label","chip","size","includes","MenuItem","ListItemText","primary","FormHelperText","hidden","List","dense","maxWidth","ListSubheader","disableSticky","lineHeight","Divider","button","marginBottom","Button","endIcon","Description","onSubmit","withStyles","theme","margin","spacing","display","flexWrap","marginTop","marginRight","overflow","noLabel","withTheme","LogRender","CustomTreeItem","root","background","group","marginLeft","borderLeft","TreeItem","node","TreeView","defaultCollapseIcon","ExpandMore","defaultExpanded","defaultExpandIcon","ChevronRight","disableSelection","renderTree","Block","Array","isArray","children","collapsed","roleList","labelContent","Typography","join","nodeId","whiteSpace","backgroundColor","useStyles","makeStyles","position","bottom","right","ScrollTop","trigger","useScrollTrigger","disableHysteresis","threshold","Zoom","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","BackToTopButton","Fab","KeyboardArrowUp","Start","StartPrime","ACC","ParseTreeNode","addChild","SyntaxTreeNode","LogParser","selectedFile","parseTreeRoot","syntaxTreeRoot","filteredTreeRoot","showRoleConfigurator","showLogRender","handleFileChange","handleFileRead","handleFileUpload","handleRoleTableChange","handleLogFilterChange","filterNodeByRole","tokenIndex","getToken","nextToken","parseStartPrime","token","parseBlock","parseACC","startNode","parseProgram","rootNode","nodeID","buildFullSyntaxTree","parseTreeNode","syntaxTreeNode","buildChildNode","originNode","buildRootNode","buildSyntaxTreeNode","child","concat","updateRole","Set","sort","roleDict","files","result","logScanner","analyze","parseTree","parse","syntaxTree","buildSyntaxTree","initializeLogFilter","fileReader","FileReader","onload","readAsText","newRoleTable","newLogFilter","reservedRoleArray","parseInt","filteredTree","cloneDeep","traverseFilter","parentNode","array1","array2","every","isIntersectionEmpty","toDeleteIndex","findIndex","splice","direction","accept","htmlFor","Publish","Send","Container","createTheme","overrides","MuiCssBaseline","body","height","minHeight","fontFamily","code","textAlign","footer","alignItems","MuiDivider","palette","main","secondary","App","ThemeProvider","CssBaseline","Link","href","GitHub","fontSize","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.69ca807c.chunk.js","sourcesContent":["export const BlockBegin = Symbol('block-begin');\r\nexport const BlockEnd = Symbol('block-end');\r\nexport const Action = Symbol('action');\r\nexport const Command = Symbol('command');\r\nexport const Comment = Symbol('comment');\r\nexport const EOF = Symbol('eof');\r\n\r\nexport default class Token {\r\n  constructor(id, tokenType, roleID, content) {\r\n    this.id = id;\r\n    this.type = tokenType;\r\n    this.roleID = roleID;\r\n    this.content = content;\r\n  }\r\n}","class Role {\r\n  constructor(id, name, type, color) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.type = type;  // \"kp\", \"dicer\", or \"pc\"\r\n    this.color = color;\r\n  }\r\n}\r\n\r\nclass RoleTable {\r\n  constructor() {\r\n    this.table = {};   // {id: Role}\r\n    this.nextRoleID = 0;\r\n  }\r\n\r\n  getName(id) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      return this.table[id].name;\r\n    }\r\n  }\r\n\r\n  setName(id, name) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      this.table[id].name = name;\r\n    }\r\n  }\r\n\r\n  getType(id) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      return this.table[id].type;\r\n    }\r\n  }\r\n\r\n  setType(id, type) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      this.table[id].type = type;\r\n    }\r\n  }\r\n\r\n  getColor(id) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      return this.table[id].color;\r\n    }\r\n  }\r\n\r\n  setColor(id, color) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      this.table[id].color = color;\r\n    }\r\n  }\r\n\r\n  getRoleIdByName(name) {\r\n    let roleArray = Object.values(this.table);\r\n    for (let i = 0; i < roleArray.length; i++) {\r\n      if (roleArray[i].name === name) {\r\n        return roleArray[i].id;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // add a role by its name and type and return its ID,\r\n  // except the name has already occurred in the role table (return its id)\r\n  addRole(roleName, roleType, roleColor) {\r\n    let existRoleID = this.getRoleIdByName(roleName);\r\n    if (existRoleID || existRoleID === 0) {\r\n      return existRoleID;\r\n    } else {\r\n      this.table[this.nextRoleID] = new Role(this.nextRoleID, roleName, roleType, roleColor);\r\n      this.nextRoleID += 1;\r\n      return this.nextRoleID - 1;\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  Role,\r\n  RoleTable,\r\n};","import Token, {BlockBegin, BlockEnd, Action, Command, Comment, EOF} from './Token';\r\nimport {RoleTable} from './Role';\r\nimport jsYaml from \"js-yaml\";\r\n\r\nconst getRandomHSLAColor = (minH, maxH, minS, maxS, minL, maxL, minA, maxA) => {\r\n  const getRandomNumber = (low, high) => {\r\n    return Math.round(Math.random() * (high - low)) + low;\r\n  }\r\n\r\n  let hue = getRandomNumber(minH, maxH);\r\n  let saturation = getRandomNumber(minS, maxS);\r\n  let lightness = getRandomNumber(minL, maxL);\r\n  let alpha = getRandomNumber(minA * 100, maxA * 100) / 100;\r\n\r\n  return `hsl(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\r\n}\r\n\r\nclass LogScanner {\r\n  constructor(rawLogData) {\r\n    this.rawLogData = rawLogData;\r\n    this.tokenSequence = [];\r\n    // empty YAML header\r\n    this.header = {\r\n      title: null,\r\n      color: {},\r\n      kp: null,\r\n      dicer: null,\r\n      show_command: false,\r\n      show_comment: false,\r\n    };\r\n    this.roleTable = new RoleTable();\r\n  }\r\n\r\n  analyze() {\r\n    let rawLogLineArray = this.rawLogData.split('\\n');\r\n    let tokenID = 0;\r\n    let lastRoleName = '';\r\n    let bufferActionContent = '';\r\n    let logStartLineNo = 0;  // the first line index after header\r\n    // handle YAML header\r\n    if (rawLogLineArray[0].trim() === '---') {\r\n      let rawHeaderContent = '';\r\n      for (let i = 1; i < rawLogLineArray.length; i++) {\r\n        if (rawLogLineArray[i].trim() === '---') {\r\n          logStartLineNo = i + 1;\r\n          this.header = jsYaml.load(rawHeaderContent);\r\n        } else {\r\n          rawHeaderContent += rawLogLineArray[i] + '\\n';\r\n        }\r\n      }\r\n    }\r\n    let logLineArray = rawLogLineArray.slice(logStartLineNo)  // ignore header part\r\n      .map((line) => line.trim())    // remove whitespace on both sides of content\r\n      .filter((line) => line);       // remove empty line\r\n    logLineArray.forEach((line, _) => {\r\n      let bracketContent = line.match(/<.+>/);  // <xxx>\r\n      if (bracketContent) {\r\n        if (lastRoleName !== '') {\r\n          let roleID = this.roleTable.addRole(lastRoleName, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n          this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n          bufferActionContent = '';\r\n          lastRoleName = '';\r\n          tokenID += 1;\r\n        }\r\n        bracketContent = bracketContent[0];\r\n        let skipBracketContent = bracketContent.slice(1,\r\n          bracketContent.length - 1);  // <xxx> without <>\r\n        if (skipBracketContent === '{') {\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, BlockBegin, null, null));\r\n        } else if (skipBracketContent === '}') {\r\n          this.tokenSequence.push(new Token(tokenID, BlockEnd, null, null));\r\n        } else {\r\n          let tokenContent = line.split('>')[1].trim();\r\n          let roleID = this.roleTable.addRole(skipBracketContent, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n          if (tokenContent[0] === '(' || tokenContent[0] === '（') {\r\n            this.tokenSequence.push(\r\n              new Token(tokenID, Comment, roleID, tokenContent));\r\n            lastRoleName = '';\r\n          } else if (tokenContent[0] === '.') {\r\n            this.tokenSequence.push(\r\n              new Token(tokenID, Command, roleID, tokenContent));\r\n            lastRoleName = '';\r\n          } else {\r\n            bufferActionContent += tokenContent;\r\n            lastRoleName = skipBracketContent;\r\n            tokenID -= 1;\r\n          }\r\n        }\r\n      } else {\r\n        let roleID = this.roleTable.addRole(lastRoleName, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n        if (line[0] === '(' || line[0] === '（') {\r\n          if (bufferActionContent !== '') {\r\n            this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n            bufferActionContent = '';\r\n            tokenID += 1;\r\n          }\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, Comment, roleID, line));\r\n        } else if (line[0] === '.') {\r\n          if (bufferActionContent !== '') {\r\n            this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n            bufferActionContent = '';\r\n          }\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, Command, roleID, line));\r\n        } else {\r\n          if (bufferActionContent !== '') {\r\n            bufferActionContent += '\\n' + line;\r\n          } else {\r\n            bufferActionContent += line;\r\n          }\r\n          tokenID -= 1;\r\n        }\r\n      }\r\n      tokenID += 1;\r\n    });\r\n    if (bufferActionContent !== '') {\r\n      let roleID = this.roleTable.addRole(lastRoleName, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n      // push action token at last line\r\n      this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n      bufferActionContent = '';\r\n    }\r\n    this.tokenSequence.push(new Token(tokenID + 1, EOF, null, null));\r\n\r\n    // update role colors according to YAML header\r\n    if (this.header.color) {\r\n      Object.entries(this.header.color).forEach(([roleName, color]) => {\r\n        let roleID = this.roleTable.getRoleIdByName(roleName);\r\n        if (roleID !== null) {\r\n          this.roleTable.setColor(roleID, color);\r\n        }\r\n      });\r\n    }\r\n    // set KP according to YAML header\r\n    if (this.header.kp) {\r\n      this.header.kp.forEach((roleName) => {\r\n        let roleID = this.roleTable.getRoleIdByName(roleName);\r\n        if (roleID !== null) {\r\n          this.roleTable.setType(roleID, 'kp');\r\n        }\r\n      });\r\n    }\r\n    // set dicer according to YAML header\r\n    if (this.header.dicer) {\r\n      this.header.dicer.forEach((roleName) => {\r\n        let roleID = this.roleTable.getRoleIdByName(roleName);\r\n        if (roleID !== null) {\r\n          this.roleTable.setType(roleID, 'dicer');\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.tokenSequence;\r\n  }\r\n}\r\n\r\nexport default LogScanner;","import React from 'react';\r\nimport {IconButton, Popover} from \"@material-ui/core\";\r\nimport {FormatColorText} from \"@material-ui/icons\";\r\nimport {SketchPicker} from \"react-color\";\r\nimport PopupState, {bindTrigger, bindPopover} from 'material-ui-popup-state';\r\n\r\nclass ColorPicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      color: this.props.color\r\n    }\r\n  }\r\n\r\n  handleChange = (color) => {\r\n    this.setState({color: color.hex})\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <PopupState variant=\"popover\" popupId=\"color-picker-popup-popover\">\r\n        {(popupState) => (\r\n          <div>\r\n            <IconButton\r\n              style={{color: this.state.color, padding: 9}}\r\n              edge=\"end\"\r\n              aria-label=\"change color\"\r\n              component=\"span\"\r\n              {...bindTrigger(popupState)}>\r\n              <FormatColorText/>\r\n            </IconButton>\r\n            <Popover\r\n              {...bindPopover(popupState)}\r\n              anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n              }}\r\n              transformOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n              }}>\r\n              <SketchPicker color={this.state.color}\r\n                            onChange={this.handleChange}\r\n                            onChangeComplete={this.props.onChangeComplete}/>\r\n            </Popover>\r\n          </div>\r\n        )}\r\n      </PopupState>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ColorPicker;","import React from \"react\";\r\nimport {\r\n  Input,\r\n  InputLabel,\r\n  MenuItem,\r\n  FormControl,\r\n  ListItemText,\r\n  Select,\r\n  Checkbox,\r\n  Chip,\r\n  TextField,\r\n  Button,\r\n  withStyles,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Grid,\r\n  ListSubheader,\r\n  FormHelperText,\r\n  Grow,\r\n  Fade,\r\n  Divider\r\n} from \"@material-ui/core\";\r\nimport {Description} from \"@material-ui/icons\";\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nconst styles = (theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    maxWidth: 240\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  chip: {\r\n    marginTop: 2,\r\n    marginRight: 2,\r\n    marginBottom: 2,\r\n    maxWidth: 100,\r\n    overflow: \"hidden\",\r\n    label: {\r\n      overflow: \"hidden\",\r\n    }\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3)\r\n  }\r\n});\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 5.5 + ITEM_PADDING_TOP,\r\n      width: 250\r\n    }\r\n  }\r\n};\r\n\r\nclass RoleConfigurator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // initialize kpList and dicerList according to YAML header\r\n    let tempKpList = [];\r\n    let tempDicerList = [];\r\n    Object.values(this.props.roleTable.table).forEach((role) => {\r\n      if (role.type === 'kp') {\r\n        tempKpList.push(role.id.toString());\r\n      } else if (role.type === 'dicer') {\r\n        tempDicerList.push(role.id.toString());\r\n      }\r\n    });\r\n    this.state = {\r\n      kpList: tempKpList,\r\n      dicerList: tempDicerList,\r\n    }\r\n\r\n    this.handleKpChange = this.handleKpChange.bind(this);\r\n    this.handleDicerChange = this.handleDicerChange.bind(this);\r\n    this.handleRoleNameChange = this.handleRoleNameChange.bind(this);\r\n    this.handleColorChange = this.handleColorChange.bind(this);\r\n    this.handleRoleFilterChange = this.handleRoleFilterChange.bind(this);\r\n    this.handleCommandFilterChange = this.handleCommandFilterChange.bind(this);\r\n    this.handleCommentFilterChange = this.handleCommentFilterChange.bind(this);\r\n  }\r\n\r\n  handleKpChange(event) {\r\n    let tempRoleTable = this.props.roleTable;\r\n    let newKpList = event.target.value;\r\n    Object.keys(tempRoleTable.table).forEach((roleID) => {\r\n      tempRoleTable.setType(roleID, 'pc');\r\n    })\r\n    newKpList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'kp');\r\n    });\r\n    this.state.dicerList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'dicer');\r\n    });\r\n    this.setState({\r\n      kpList: newKpList\r\n    }, () => {\r\n      this.props.onRoleTableChange(tempRoleTable);\r\n    });\r\n  }\r\n\r\n  handleDicerChange(event) {\r\n    let tempRoleTable = this.props.roleTable;\r\n    let newDicerList = event.target.value;\r\n    Object.keys(tempRoleTable.table).forEach((roleID) => {\r\n      tempRoleTable.setType(roleID, 'pc');\r\n    })\r\n    this.state.kpList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'kp');\r\n    });\r\n    newDicerList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'dicer');\r\n    });\r\n    this.setState({\r\n      dicerList: newDicerList\r\n    }, () => {\r\n      this.props.onRoleTableChange(tempRoleTable);\r\n    });\r\n  }\r\n\r\n  handleRoleNameChange(roleID, newRoleName) {\r\n    let tempRoleTable = this.props.roleTable;\r\n    tempRoleTable.setName(roleID, newRoleName);\r\n    this.props.onRoleTableChange(tempRoleTable);\r\n  }\r\n\r\n  handleColorChange(roleID, newRoleColor) {\r\n    let tempRoleTable = this.props.roleTable;\r\n    tempRoleTable.setColor(roleID, newRoleColor);\r\n    this.props.onRoleTableChange(tempRoleTable);\r\n  }\r\n\r\n  handleRoleFilterChange(roleID) {\r\n    let tempLogFilter = this.props.logFilter;\r\n    tempLogFilter.role[roleID] = !tempLogFilter.role[roleID];\r\n    this.props.onFilterChange(tempLogFilter);\r\n  }\r\n\r\n  handleCommandFilterChange() {\r\n    let tempLogFilter = this.props.logFilter;\r\n    tempLogFilter.command = !tempLogFilter.command;\r\n    this.props.onFilterChange(tempLogFilter);\r\n    this.setState({logFilter: tempLogFilter});\r\n  }\r\n\r\n  handleCommentFilterChange() {\r\n    let tempLogFilter = this.props.logFilter;\r\n    tempLogFilter.comment = !tempLogFilter.comment;\r\n    this.props.onFilterChange(tempLogFilter);\r\n  }\r\n\r\n  render() {\r\n    const classes = this.props.classes;\r\n\r\n    const kpTable = Object.keys(this.props.roleTable.table)\r\n      .filter((roleID) => this.props.roleTable.getType(roleID) === 'kp');\r\n    const dicerTable = Object.keys(this.props.roleTable.table)\r\n      .filter((roleID) => this.props.roleTable.getType(roleID) === 'dicer');\r\n    const pcTable = Object.keys(this.props.roleTable.table)\r\n      .filter((roleID) => this.props.roleTable.getType(roleID) === 'pc');\r\n\r\n    const generateListItem = (roleID, disabledCheckbox) => (\r\n      <Grow key={roleID} in timeout={1500} mountOnEnter unmountOnExit>\r\n        <ListItem key={roleID} style={{justifyContent: \"center\"}}>\r\n          <ListItemIcon style={{minWidth: 0, paddingLeft: 9, paddingRight: 9}}>\r\n            <Checkbox\r\n              edge=\"start\"\r\n              onClick={() => this.handleRoleFilterChange(roleID)}\r\n              checked={this.props.logFilter.role[roleID]}\r\n              disabled={disabledCheckbox}\r\n            />\r\n          </ListItemIcon>\r\n          <TextField\r\n            id={\"text-field-role\" + roleID}\r\n            color=\"secondary\"\r\n            key={'text-' + roleID}\r\n            InputProps={{\r\n              style: {color: this.props.roleTable.getColor(roleID)}\r\n            }}\r\n            fullWidth\r\n            error={!this.props.roleTable.getName(roleID)}\r\n            value={this.props.roleTable.getName(roleID)}\r\n            onChange={(event) => {\r\n              this.handleRoleNameChange(roleID, event.target.value);\r\n            }}\r\n          />\r\n          <ListItemIcon key={'icon-' + roleID} style={{minWidth: 0, paddingLeft: 9, paddingRight: 9}}>\r\n            <ColorPicker id={roleID}\r\n                         color={this.props.roleTable.getColor(roleID)}\r\n                         onChangeComplete={(color) => {\r\n                           this.handleColorChange(roleID, color.hex)\r\n                         }}/>\r\n          </ListItemIcon>\r\n        </ListItem>\r\n      </Grow>);\r\n\r\n    console.log(kpTable, this.props.roleTable);\r\n\r\n    return ([\r\n      <Grid container key=\"kp-and-dicer-configurator-grid\">\r\n        <Grid item xs align=\"right\">\r\n          <Fade in timeout={1500}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"kp-selection-checkbox-label\">Select KP</InputLabel>\r\n              <Select\r\n                labelId=\"kp-selection-checkbox-label\"\r\n                id=\"kp-selection-checkbox\"\r\n                multiple\r\n                error={this.state.kpList.length === 0}\r\n                value={this.state.kpList}\r\n                onChange={this.handleKpChange}\r\n                input={<Input/>}\r\n                renderValue={(selected) => (\r\n                  <div className={classes.chips}>\r\n                    {selected.map((value) => (\r\n                      <Chip key={value}\r\n                            label={this.props.roleTable.getName(value)}\r\n                            className={classes.chip}\r\n                            size=\"small\"/>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {Object.keys(this.props.roleTable.table).map((roleID) => {\r\n                  if (!this.state.dicerList.includes(roleID)) {\r\n                    console.log(roleID, this.state.kpList, this.state.kpList.includes(roleID));\r\n                    return (\r\n                      <MenuItem key={roleID} value={roleID}>\r\n                        <Checkbox checked={this.state.kpList.includes(roleID)}/>\r\n                        <ListItemText primary={this.props.roleTable.getName(roleID)}/>\r\n                      </MenuItem>\r\n                    )\r\n                  } else {\r\n                    return null;\r\n                  }\r\n                })}\r\n              </Select>\r\n              <FormHelperText error hidden={this.state.kpList.length !== 0}>Must set at least one kp.</FormHelperText>\r\n            </FormControl>\r\n          </Fade>\r\n        </Grid>\r\n        <Grid item xs align=\"left\">\r\n          <Fade in timeout={1500}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"dicer-selection-checkbox-label\">Select dicer</InputLabel>\r\n              <Select\r\n                labelId=\"dicer-selection-checkbox-label\"\r\n                id=\"dicer-selection-checkbox\"\r\n                multiple\r\n                error={this.state.dicerList.length === 0}\r\n                value={this.state.dicerList}\r\n                onChange={this.handleDicerChange}\r\n                input={<Input/>}\r\n                renderValue={(selected) => (\r\n                  <div className={classes.chips}>\r\n                    {selected.map((value) => (\r\n                      <Chip key={value}\r\n                            label={this.props.roleTable.getName(value)}\r\n                            className={classes.chip}\r\n                            size=\"small\"/>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {Object.keys(this.props.roleTable.table).map((roleID) => {\r\n                  if (!this.state.kpList.includes(roleID)) {\r\n                    return (\r\n                      <MenuItem key={roleID} value={roleID}>\r\n                        <Checkbox checked={this.state.dicerList.includes(roleID)}/>\r\n                        <ListItemText primary={this.props.roleTable.getName(roleID)}/>\r\n                      </MenuItem>\r\n                    );\r\n                  } else {\r\n                    return null;\r\n                  }\r\n                })}\r\n              </Select>\r\n              <FormHelperText error hidden={this.state.dicerList.length !== 0}>Must set at least one\r\n                dicer.</FormHelperText>\r\n            </FormControl>\r\n          </Fade>\r\n        </Grid>\r\n      </Grid>,\r\n      <Grid container key=\"name-and-color-configurator-grid\">\r\n        <Grid item xs align=\"center\">\r\n          <Fade in timeout={1500}>\r\n            <List dense style={{maxWidth: '360px'}}>\r\n              {kpTable.length !== 0 &&\r\n              <Fade key=\"kp\" in timeout={1500} mountOnEnter unmountOnExit>\r\n                <ListSubheader key=\"kp\" disableSticky style={{lineHeight: '28px'}}>\r\n                  KP\r\n                </ListSubheader>\r\n              </Fade>}\r\n              {kpTable.map((roleID) => generateListItem(roleID, true))}\r\n              {dicerTable.length !== 0 &&\r\n              <Fade key=\"dicer\" in timeout={1500} mountOnEnter unmountOnExit>\r\n                <ListSubheader key=\"dicer\" disableSticky style={{lineHeight: '28px'}}>\r\n                  Dicer\r\n                </ListSubheader>\r\n              </Fade>}\r\n              {dicerTable.map((roleID) => generateListItem(roleID, true))}\r\n              {pcTable.length !== 0 &&\r\n              <Fade key=\"pc\" in timeout={1500} mountOnEnter unmountOnExit>\r\n                <ListSubheader key=\"pc\" disableSticky style={{lineHeight: '28px'}}>\r\n                  PC\r\n                </ListSubheader>\r\n              </Fade>}\r\n              {pcTable.map((roleID) => generateListItem(roleID, false))}\r\n              <Divider key=\"divider\" variant=\"middle\"/>\r\n              <Grow key=\"command-checkbox\" in timeout={1500} mountOnEnter unmountOnExit>\r\n                <ListItem key='command' button onClick={this.handleCommandFilterChange}>\r\n                  <ListItemIcon key='command-icon'>\r\n                    <Checkbox\r\n                      key='command-checkbox'\r\n                      edge=\"start\"\r\n                      checked={this.props.logFilter.command}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText id='label-command' key='label-command' primary='Show Command'/>\r\n                </ListItem>\r\n              </Grow>\r\n              <Grow key=\"comment-checkbox\" in timeout={1500} mountOnEnter unmountOnExit>\r\n                <ListItem key='comment' button onClick={this.handleCommentFilterChange}>\r\n                  <ListItemIcon key='comment-icon'>\r\n                    <Checkbox\r\n                      key='comment-checkbox'\r\n                      edge=\"start\"\r\n                      checked={this.props.logFilter.comment}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText id='label-comment' key='label-comment' primary='Show Comment'/>\r\n                </ListItem>\r\n              </Grow>\r\n            </List>\r\n          </Fade>\r\n        </Grid>\r\n      </Grid>,\r\n      <Grid container key=\"apply-button-grid\" style={{marginBottom: \"1em\"}}>\r\n        <Grid item xs align=\"center\">\r\n          <Button\r\n            key=\"render-button\"\r\n            variant={this.state.kpList.length === 0 && this.state.dicerList.length === 0 ? \"outlined\" : \"contained\"}\r\n            color=\"secondary\"\r\n            disabled={this.state.kpList.length === 0 || this.state.dicerList.length === 0}\r\n            endIcon={<Description/>}\r\n            onClick={this.props.onSubmit}>\r\n            Render\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    ]);\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(RoleConfigurator);","import React from \"react\";\r\nimport {Block} from \"./LogParser\";\r\nimport {Typography, withStyles} from \"@material-ui/core\";\r\nimport {TreeItem, TreeView} from \"@material-ui/lab\";\r\nimport {ChevronRight, ExpandMore} from \"@material-ui/icons\";\r\n\r\nconst styles = (theme) => ({\r\n  \"@global\": {\r\n    \".MuiTreeItem-root.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n      backgroundColor: \"white\"\r\n    },\r\n    \".MuiTreeItem-root.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label:hover, .MuiTreeItem-root.Mui-selected:focus > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n      backgroundColor: \"gray\"\r\n    }\r\n  }\r\n});\r\n\r\nclass LogRender extends React.Component {\r\n  render() {\r\n    const classes = this.props.classes;\r\n\r\n    const CustomTreeItem = withStyles({\r\n      root: {\r\n        // \"&.MuiTreeItem-root.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label:hover\": {\r\n        //   background: \"transparent\"\r\n        // },\r\n        // \"&.MuiTreeItem-root.Mui-selected:focus > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n        //   background: \"transparent\"\r\n        // },\r\n        \"&.MuiTreeItem-root:focus > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n          background: \"transparent\"\r\n        },\r\n        \"&.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n          background: \"transparent\"\r\n        },\r\n        \"&.MuiTreeItem-root > .MuiTreeItem-content:hover\": {\r\n          background: \"transparent\"\r\n        },\r\n        \"&.MuiTreeItem-root > .MuiTreeItem-content:hover > .MuiTreeItem-label\": {\r\n          background: \"transparent\"\r\n        }\r\n      },\r\n      group: {\r\n        marginLeft: 7,\r\n        paddingLeft: 18,\r\n        borderLeft: \"1px dashed #33333333\",\r\n      },\r\n    })(TreeItem);\r\n\r\n    const renderTree = (node) => {\r\n      if (node.type !== Block) {\r\n        if (node.content) {\r\n          return <Typography key={node.id}\r\n                             style={{color: this.props.roleTable.getColor(node.role), whiteSpace: 'pre-line'}}>\r\n            {`<${this.props.roleTable.getName(node.role)}> ${node.content}`}\r\n          </Typography>;\r\n        }\r\n      } else {\r\n        if (Array.isArray(node.children)) {\r\n          if (node.collapsed) {\r\n            let roleList = node.role.map((roleID) => {\r\n              if (this.props.roleTable.getType(roleID) === 'pc') {\r\n                return this.props.roleTable.getName(roleID)\r\n              } else {\r\n                return null;\r\n              }\r\n            }).filter((roleName) => roleName);\r\n            let labelContent = <Typography\r\n              style={{color: \"#a2a2a2\"}}>{`{${roleList.join(', ')}}`}</Typography>;\r\n            return (\r\n              <CustomTreeItem key={node.id} nodeId={node.id.toString()} label={labelContent}>\r\n                {node.children.map((node) => renderTree(node))}\r\n              </CustomTreeItem>\r\n            );\r\n          } else {\r\n            return node.children.map((node) => renderTree(node));\r\n          }\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.props.node) {\r\n      return ([\r\n        this.props.header.title && <h1 key=\"title\">{this.props.header.title}</h1>,\r\n        <TreeView\r\n          className={classes.root}\r\n          key=\"render-tree\"\r\n          defaultCollapseIcon={<ExpandMore/>}\r\n          defaultExpanded={['root']}\r\n          defaultExpandIcon={<ChevronRight/>}\r\n          disableSelection\r\n          style={{marginBottom: \"48px\"}}\r\n        >\r\n          {renderTree(this.props.node)}\r\n        </TreeView>\r\n      ]);\r\n    } else {\r\n      return null;\r\n    }\r\n    // let children = null;\r\n    // if (this.props.node && this.props.node.children !== 0) {\r\n    //   children = (\r\n    //     <ul style={{listStyleType: 'none', margin: 0}}>\r\n    //       {this.props.node.children.map((i) => (\r\n    //         <LogRender node={i} key={'log-node-' + i.id} roleTable={this.props.roleTable}/>\r\n    //       ))}\r\n    //     </ul>\r\n    //   );\r\n    //   if (this.props.node.type === Block) {\r\n    //     let blockRoles = this.props.node.role.map((roleID) => this.props.roleTable.getName(roleID)).join(', ');\r\n    //     if (this.props.node.id === 0) {\r\n    //       // not render the root Block node\r\n    //       return (<div>{children}</div>);\r\n    //     } else {\r\n    //       return (\r\n    //         <li>\r\n    //           <span>[{blockRoles}]</span>\r\n    //           {children}\r\n    //         </li>\r\n    //       );\r\n    //     }\r\n    //   } else {\r\n    //     return (\r\n    //       <li>\r\n    //         <span>&lt;{this.props.roleTable.getName(this.props.node.role)}&gt;</span> {this.props.node.content}\r\n    //         {children}\r\n    //       </li>\r\n    //     );\r\n    //   }\r\n    // } else {\r\n    //   return null;\r\n    // }\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(LogRender);","import React from \"react\";\r\nimport {Fab, Zoom, useScrollTrigger, makeStyles} from \"@material-ui/core\";\r\nimport {KeyboardArrowUp} from '@material-ui/icons'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    position: \"fixed\",\r\n    bottom: theme.spacing(3),\r\n    right: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nfunction ScrollTop(props) {\r\n  const { children } = props;\r\n  const classes = useStyles();\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 100\r\n  });\r\n\r\n  const handleClick = (event) => {\r\n    const anchor = (event.target.ownerDocument || document).querySelector(\r\n      \"#back-to-top-anchor\"\r\n    );\r\n    if (anchor) {\r\n      anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Zoom in={trigger}>\r\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\r\n        {children}\r\n      </div>\r\n    </Zoom>\r\n  );\r\n}\r\n\r\nexport default function BackToTopButton(props) {\r\n  return (\r\n    <ScrollTop {...props}>\r\n      <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\r\n        <KeyboardArrowUp />\r\n      </Fab>\r\n    </ScrollTop>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport {Button, Container, Divider, Fade, Grid} from '@material-ui/core';\r\nimport {Publish, Send} from '@material-ui/icons';\r\nimport LogScanner from './LogScanner';\r\nimport * as Token from './Token';\r\nimport RoleConfigurator from \"./RoleConfigurator\";\r\nimport LogRender from \"./LogRender\";\r\nimport BackToTopButton from \"./BackToTopButton\";\r\n\r\nexport const Start = Symbol('Start');\r\nexport const StartPrime = Symbol('Start\\'');\r\nexport const Block = Symbol('Block');\r\nexport const BlockBegin = Symbol('block-begin');\r\nexport const BlockEnd = Symbol('block-end');\r\nexport const ACC = Symbol('ACC');\r\nexport const Action = Symbol('action');\r\nexport const Command = Symbol('command');\r\nexport const Comment = Symbol('comment');\r\n\r\nclass ParseTreeNode {\r\n  constructor(type, content) {\r\n    this.type = type;\r\n    this.content = content;\r\n    this.children = [];\r\n  }\r\n\r\n  addChild = (node) => {\r\n    this.children.push(node);\r\n  };\r\n}\r\n\r\nclass SyntaxTreeNode {\r\n  constructor(id, type, role, content) {\r\n    this.id = id;\r\n    this.type = type;\r\n    this.role = role;\r\n    this.content = content;\r\n    this.children = [];\r\n  }\r\n\r\n  addChild = (node) => {\r\n    this.children.push(node);\r\n  };\r\n}\r\n\r\nclass LogParser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.header = {\r\n      show_command: false,\r\n      show_comment: false\r\n    };\r\n    this.state = {\r\n      selectedFile: null,\r\n      parseTreeRoot: null,\r\n      syntaxTreeRoot: null,\r\n      filteredTreeRoot: null,\r\n      roleTable: null,\r\n      logFilter: {},   // e.g.: {\"role\": {0: true, 1: false, ...}], \"command\": true, \"comment\": true}\r\n      showRoleConfigurator: false,\r\n      // showLogFilter: false,\r\n      showLogRender: false,\r\n    };\r\n    this.handleFileChange = this.handleFileChange.bind(this);\r\n    this.handleFileRead = this.handleFileRead.bind(this);\r\n    this.handleFileUpload = this.handleFileUpload.bind(this);\r\n    this.handleRoleTableChange = this.handleRoleTableChange.bind(this);\r\n    this.handleLogFilterChange = this.handleLogFilterChange.bind(this);\r\n    this.filterNodeByRole = this.filterNodeByRole.bind(this);\r\n  }\r\n\r\n  // syntax:\r\n  //\r\n  // Start -> Block Start' | ACC Start'\r\n  // Start' -> Block Start' | ACC Start' | empty\r\n  // Block -> block-begin Start' block-end\r\n  // ACC -> action | command | comment\r\n  parse(tokenSequence) {\r\n    let tokenIndex = 0;\r\n    const getToken = () => tokenSequence[tokenIndex];\r\n    const nextToken = () => tokenIndex += 1;\r\n\r\n    let parseProgram = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        node.addChild(new ParseTreeNode(Block, null));\r\n        if (parseBlock(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else if (token.type === Token.Action || token.type === Token.Command ||\r\n        token.type === Token.Comment) {\r\n        node.addChild(new ParseTreeNode(ACC, null));\r\n        if (parseACC(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else {\r\n        console.log(`Error parsing at ${token}.`);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    let parseStartPrime = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        node.addChild(new ParseTreeNode(Block, null));\r\n        if (parseBlock(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else if (token.type === Token.Action || token.type === Token.Command ||\r\n        token.type === Token.Comment) {\r\n        node.addChild(new ParseTreeNode(ACC, null));\r\n        if (parseACC(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else {\r\n        return true;    // for Start' -> empty\r\n      }\r\n    };\r\n\r\n    let parseBlock = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        node.addChild(new ParseTreeNode(BlockBegin, token));\r\n        nextToken();\r\n        node.addChild(new ParseTreeNode(StartPrime, null));\r\n        if (parseStartPrime(node.children[1])) {\r\n          node.addChild(new ParseTreeNode(BlockEnd, getToken()));\r\n          if (getToken().type === Token.BlockEnd) {\r\n            nextToken();\r\n            return true;\r\n          } else {\r\n            console.log(\r\n              `Error parsing at ${getToken()}, should be <block-end>.`);\r\n          }\r\n        }\r\n      } else {\r\n        console.log(`Error parsing at ${getToken()}, should be <block-begin>.`);\r\n      }\r\n    };\r\n\r\n    let parseACC = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.Action) {\r\n        node.addChild(new ParseTreeNode(Action, token));\r\n        nextToken();\r\n        return true;\r\n      } else if (token.type === Token.Command) {\r\n        node.addChild(new ParseTreeNode(Command, token));\r\n        nextToken();\r\n        return true;\r\n      } else if (token.type === Token.Comment) {\r\n        node.addChild(new ParseTreeNode(Comment, token));\r\n        nextToken();\r\n        return true;\r\n      } else {\r\n        console.log(\r\n          `Error parsing at ${token}, should be <action> or <command> or <comment>.`);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    let startNode = new ParseTreeNode(Start);\r\n    if (parseProgram(startNode)) {\r\n      return startNode;\r\n    } else {\r\n      console.log('Failed to parse the code.');\r\n    }\r\n  }\r\n\r\n  buildSyntaxTree(rootNode) {\r\n    let nodeID = 1;\r\n    let buildSyntaxTreeNode = (originNode, buildRootNode) => {\r\n      if (originNode.type === Block) {\r\n        buildRootNode.addChild(new SyntaxTreeNode(nodeID, Block, [], null));\r\n      } else if (originNode.type === Action || originNode.type === Command ||\r\n        originNode.type === Comment) {\r\n        buildRootNode.addChild(\r\n          new SyntaxTreeNode(nodeID, originNode.type, originNode.content.roleID,\r\n            originNode.content.content));\r\n      } else {\r\n        // do nothing\r\n        return false;\r\n      }\r\n      nodeID += 1;\r\n      return buildRootNode.children[buildRootNode.children.length - 1];\r\n    };\r\n\r\n    let buildFullSyntaxTree = (parseTreeNode, syntaxTreeNode) => {\r\n      if (parseTreeNode) {\r\n        let buildChildNode = buildSyntaxTreeNode(parseTreeNode, syntaxTreeNode);\r\n        if (buildChildNode) {\r\n          parseTreeNode.children.forEach(\r\n            (child, _) => buildFullSyntaxTree(child, buildChildNode));\r\n        } else {\r\n          parseTreeNode.children.forEach(\r\n            (child, _) => buildFullSyntaxTree(child, syntaxTreeNode));\r\n        }\r\n      }\r\n    };\r\n\r\n    let syntaxTreeRoot = new SyntaxTreeNode(0, Block, [], null);  // global block containing all roles\r\n    buildFullSyntaxTree(rootNode, syntaxTreeRoot);\r\n    return syntaxTreeRoot;\r\n  }\r\n\r\n  // traverse syntax tree in post order to update \"role\" in Block nodes\r\n  updateRole(rootNode) {\r\n    if (rootNode) {\r\n      if (rootNode.type === Block) {\r\n        let roleArray = rootNode.role;\r\n        rootNode.children.forEach(\r\n          (child, _) => roleArray = roleArray.concat(this.updateRole(child)));\r\n        rootNode.role = [...new Set(roleArray)].sort();\r\n      }\r\n      return rootNode.role;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  initializeLogFilter() {\r\n    let roleDict = {};\r\n    this.state.syntaxTreeRoot.role.forEach((role) => roleDict[role] = true);\r\n    return {\r\n      'role': roleDict,\r\n      'command': this.header.show_command, // according to show_command in YAML header, default value is false\r\n      'comment': this.header.show_comment, // according to show_comment in YAML header, default value is false\r\n    };\r\n  }\r\n\r\n  handleFileChange(event) {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n    });\r\n  }\r\n\r\n  handleFileRead(event) {\r\n    let content = event.target.result;\r\n    let logScanner = new LogScanner(content);\r\n    let tokenSequence = logScanner.analyze();\r\n    this.header = logScanner.header;\r\n    let parseTree = this.parse(tokenSequence);\r\n    let syntaxTree = this.buildSyntaxTree(parseTree);\r\n    this.setState({\r\n      parseTreeRoot: parseTree,\r\n      syntaxTreeRoot: syntaxTree,\r\n      roleTable: logScanner.roleTable,\r\n    }, () => {\r\n      this.updateRole(this.state.syntaxTreeRoot);\r\n      let logFilter = this.initializeLogFilter();\r\n      this.setState({logFilter: logFilter, showRoleConfigurator: true});\r\n    });\r\n  }\r\n\r\n  handleFileUpload() {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = this.handleFileRead;\r\n    fileReader.readAsText(this.state.selectedFile);\r\n  }\r\n\r\n  handleRoleTableChange(newRoleTable) {\r\n    this.setState({roleTable: newRoleTable});\r\n  }\r\n\r\n  handleLogFilterChange(newLogFilter) {\r\n    this.setState({logFilter: newLogFilter});\r\n  }\r\n\r\n  // post-order traversal to delete nodes add update collapse states according to role filter checkboxes\r\n  // deletion rule:\r\n  //   1. If none of the reserved roles appear in the Block (except kp and dicer), delete the Block (and its children) node.\r\n  //   2. If is a action / command / comment node and is filtered out according to the checkboxes, delete it.\r\n  // collapsing rule:\r\n  //   If there exists a reserved role that does not appear in the Block node, collapse the node.\r\n  filterNodeByRole() {\r\n    // get all reserved roles from rileFilter\r\n    let reservedRoleArray = [];\r\n    Object.keys(this.state.logFilter.role).forEach((roleID) => {\r\n      if (this.state.roleTable.getType(roleID) === 'pc' && this.state.logFilter.role[roleID]) {\r\n        reservedRoleArray.push(roleID);\r\n      }\r\n    });\r\n    reservedRoleArray = reservedRoleArray.map((roleID) => parseInt(roleID));\r\n\r\n    let isIntersectionEmpty = (array1, array2) => {\r\n      return !array1.map((item) => array2.includes(item)).includes(true);\r\n    };\r\n\r\n    let isSubsetOf = (array1, array2) => {\r\n      return array1.every((value) => array2.includes(value));\r\n    }\r\n\r\n    let filteredTree = _.cloneDeep(this.state.syntaxTreeRoot);\r\n\r\n    let traverseFilter = (node, parentNode) => {\r\n      if (node) {\r\n        // make a clone to prevent wrong index made by deletion in iteration\r\n        node.children.slice(0)\r\n          .forEach((child, _) => traverseFilter(child, node));\r\n        if (node.type === Block) {\r\n          node.collapsed = !isSubsetOf(reservedRoleArray, node.role);\r\n          if ((node.children.length === 0 && parentNode) ||\r\n            isIntersectionEmpty(node.role, reservedRoleArray)) {\r\n            // Block is empty or no reserved roles appear\r\n            let toDeleteIndex = parentNode.children.findIndex(\r\n              (child) => child.id === node.id);\r\n            parentNode.children.splice(toDeleteIndex, 1);\r\n            node = null;\r\n          }\r\n        } else {\r\n          node.collapsed = false;\r\n          // check for filtering command / comment\r\n          if ((node.type === Command && (!this.state.logFilter.command)) ||\r\n            (node.type === Comment && (!this.state.logFilter.comment))) {\r\n            let toDeleteIndex = parentNode.children.findIndex(\r\n              (child) => child.id === node.id);\r\n            parentNode.children.splice(toDeleteIndex, 1);\r\n            node = null;\r\n          }\r\n        }\r\n      }\r\n    };\r\n    traverseFilter(filteredTree, null);\r\n    this.updateRole(filteredTree);\r\n    this.setState({filteredTreeRoot: filteredTree, showLogRender: true});\r\n  }\r\n\r\n  render() {\r\n    return ([\r\n      <div id=\"back-to-top-anchor\" key=\"back-to-top-anchor\"/>,\r\n      <BackToTopButton key=\"back-to-top-button\"/>,\r\n      <Grid key=\"handle-file-grid\" container spacing={1} direction=\"column\" style={{marginBottom: 24}}>\r\n        <Grid item xs align=\"center\">\r\n          <input\r\n            hidden\r\n            id=\"contained-button-file\"\r\n            accept=\"text/plain,.log\"\r\n            type=\"file\"\r\n            onChange={this.handleFileChange}\r\n          />\r\n          <label htmlFor=\"contained-button-file\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              endIcon={<Publish/>}\r\n            >\r\n              Browse\r\n            </Button>\r\n          </label>\r\n        </Grid>\r\n        {this.state.selectedFile &&\r\n        <Fade in timeout={1500}>\r\n          <Grid item xs align=\"center\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              endIcon={<Send/>}\r\n              onClick={this.handleFileUpload}>\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n        </Fade>}\r\n      </Grid>,\r\n      <Grid container key=\"role-configurator-grid\">\r\n        {this.state.showRoleConfigurator &&\r\n        <RoleConfigurator key=\"role-configurator\"\r\n                          roleTable={_.cloneDeep(this.state.roleTable)}\r\n                          logFilter={this.state.logFilter}\r\n                          header={this.header}\r\n                          onRoleTableChange={this.handleRoleTableChange}\r\n                          onFilterChange={this.handleLogFilterChange}\r\n                          onSubmit={this.filterNodeByRole}/>\r\n        }\r\n      </Grid>,\r\n      <Divider hidden={!this.state.showLogRender} key=\"divider\"/>,\r\n      // <Grid container key=\"role-filter-grid\">\r\n      //   {this.state.showLogFilter &&\r\n      //   <LogFilter key=\"filter\"\r\n      //              logFilter={this.state.logFilter}\r\n      //              roleTable={this.state.roleTable}\r\n      //              onSubmit={this.filterNodeByRole}/>\r\n      //   }\r\n      // </Grid>,\r\n      <Container key=\"log-render-container\" maxWidth=\"md\">\r\n        {this.state.showLogRender &&\r\n        <LogRender key=\"render\"\r\n                   node={this.state.filteredTreeRoot}\r\n                   roleTable={this.state.roleTable}\r\n                   header={this.header}/>}\r\n      </Container>\r\n    ]);\r\n  }\r\n}\r\n\r\nexport default LogParser;","import {createTheme, ThemeProvider, CssBaseline, Container, Link} from \"@material-ui/core\";\r\nimport LogParser from './LogParser';\r\nimport {GitHub} from '@material-ui/icons';\r\n\r\nconst theme = createTheme({\r\n  overrides: {\r\n    MuiCssBaseline: {\r\n      \"@global\": {\r\n        body: {\r\n          height: \"100%\",\r\n          minHeight: \"100%\",\r\n          width: \"100%\",\r\n          fontFamily: \"-apple-system, 'Helvetica Neue', Helvetica ,Arial, 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', 'Microsoft Yahei', sans-serif\",\r\n          '-webkit-font-smoothing': 'antialiased',\r\n          '-moz-osx-font-smoothing': 'grayscale',\r\n        },\r\n        code: {\r\n          fontFamily: \"source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace\",\r\n        },\r\n        header: {\r\n          textAlign: \"center\",\r\n          marginTop: \"3em\",\r\n          marginBottom: \"3em\"\r\n        },\r\n        footer: {\r\n          padding: \"1.5em\",\r\n          marginTop: \"auto\",\r\n          width: \"100%\",\r\n          textAlign: \"center\"\r\n        }\r\n      }\r\n    },\r\n    Grid: {\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\"\r\n    },\r\n    MuiDivider: {\r\n      root: {\r\n        margin: \"12px\"\r\n      }\r\n    }\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: \"#717bd6\",\r\n    },\r\n    secondary: {\r\n      main: \"#e8618c\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"md\" style={{minHeight: \"82vh\"}}>\r\n        <header>\r\n          <h1>\r\n            es-logger\r\n          </h1>\r\n          <h3>\r\n            A simple logger for CoC.\r\n          </h3>\r\n        </header>\r\n        <LogParser />\r\n      </Container>\r\n      <footer id=\"footer\" className=\"footer\">\r\n        <Link href=\"https://github.com/etosphere/es-logger\" style={{color: \"#907da2\"}}>\r\n          <GitHub fontSize=\"small\"/>\r\n        </Link>\r\n        <div style={{color: \"#907da2\"}}>©&nbsp;2021&nbsp;ES</div>\r\n      </footer>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}