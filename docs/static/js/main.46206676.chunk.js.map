{"version":3,"sources":["Token.js","Role.js","LogScanner.js","ColorPicker.js","RoleConfigurator.js","LogFilter.js","LogRender.js","BackToTopButton.js","LogParser.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["BlockBegin","Symbol","BlockEnd","Action","Command","Comment","EOF","Token","id","tokenType","roleID","content","this","type","Role","name","color","RoleTable","table","nextRoleID","roleArray","Object","values","i","length","roleName","roleType","roleColor","existRoleID","getRoleIdByName","getRandomHSLAColor","minH","maxH","minS","maxS","minL","maxL","minA","maxA","getRandomNumber","low","high","Math","round","random","hue","saturation","lightness","alpha","LogScanner","rawLogData","tokenSequence","roleTable","logArray","split","map","str","trim","tokenID","lastRoleName","bufferActionContent","forEach","line","_","bracketContent","match","addRole","push","skipBracketContent","slice","tokenContent","ColorPicker","props","handleChange","setState","hex","state","variant","popupId","popupState","IconButton","style","component","bindTrigger","FormatColorText","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","onChange","onChangeComplete","React","Component","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","width","RoleConfigurator","kpList","dicerList","handleKpChange","bind","handleDicerChange","handleRoleNameChange","handleColorChange","handleClick","event","tempRoleTable","newKpList","target","value","keys","setType","role","newDicerList","newRoleName","setName","newRoleColor","setColor","onSubmit","classes","kpTable","filter","getType","dicerTable","pcTable","generateListItem","ListItem","dense","disableGutters","justifyContent","TextField","size","InputProps","getColor","getName","ListItemIcon","minWidth","Grid","container","item","xs","align","FormControl","className","formControl","InputLabel","Select","labelId","multiple","input","Input","renderValue","selected","chips","Chip","label","chip","includes","MenuItem","Checkbox","checked","ListItemText","primary","List","ListSubheader","disableSticky","marginBottom","Button","endIcon","Check","onClick","withStyles","theme","margin","spacing","maxWidth","display","flexWrap","marginTop","marginRight","overflow","noLabel","withTheme","LogFilter","logFilter","handleRoleChange","handleCommandChange","handleCommentChange","tempLogFilter","command","comment","filterElement","button","edge","Divider","direction","alignItems","sm","disablePadding","Description","LogRender","CustomTreeItem","root","background","group","marginLeft","paddingLeft","borderLeft","TreeItem","node","TreeView","defaultCollapseIcon","ExpandMore","defaultExpanded","defaultExpandIcon","ChevronRight","disableSelection","renderTree","Block","labelContent","Typography","nodeId","toString","Array","isArray","children","collapsed","roleList","join","backgroundColor","useStyles","makeStyles","position","bottom","right","ScrollTop","trigger","useScrollTrigger","disableHysteresis","threshold","Zoom","in","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","BackToTopButton","Fab","KeyboardArrowUp","Start","StartPrime","ACC","ParseTreeNode","addChild","SyntaxTreeNode","LogParser","selectedFile","parseTreeRoot","syntaxTreeRoot","filteredTreeRoot","handleFileChange","handleFileRead","handleFileUpload","handleCheckboxChange","handleRoleTableChange","filterNodeByRole","tokenIndex","getToken","nextToken","parseStartPrime","token","parseBlock","parseACC","console","log","startNode","parseProgram","rootNode","nodeID","buildFullSyntaxTree","parseTreeNode","syntaxTreeNode","buildChildNode","originNode","buildRootNode","buildSyntaxTreeNode","child","concat","updateRole","Set","sort","roleDict","files","result","logScanner","analyze","parseTree","parse","syntaxTree","buildSyntaxTree","initializeLogFilter","fileReader","FileReader","onload","readAsText","newLogFilter","newRoleTable","reservedRoleArray","parseInt","filteredTree","cloneDeep","traverseFilter","parentNode","array1","array2","every","isIntersectionEmpty","toDeleteIndex","findIndex","splice","hidden","accept","htmlFor","Publish","Send","hasOwnProperty","Container","createTheme","overrides","MuiCssBaseline","body","height","fontFamily","code","header","textAlign","App","ThemeProvider","CssBaseline","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.46206676.chunk.js","sourcesContent":["export const BlockBegin = Symbol('block-begin');\r\nexport const BlockEnd = Symbol('block-end');\r\nexport const Action = Symbol('action');\r\nexport const Command = Symbol('command');\r\nexport const Comment = Symbol('comment');\r\nexport const EOF = Symbol('eof');\r\n\r\nexport default class Token {\r\n  constructor(id, tokenType, roleID, content) {\r\n    this.id = id;\r\n    this.type = tokenType;\r\n    this.roleID = roleID;\r\n    this.content = content;\r\n  }\r\n}","class Role {\r\n  constructor(id, name, type, color) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.type = type;  // \"kp\", \"dicer\", or \"pc\"\r\n    this.color = color;\r\n  }\r\n}\r\n\r\nclass RoleTable {\r\n  constructor() {\r\n    this.table = {};   // {id: Role}\r\n    this.nextRoleID = 0;\r\n  }\r\n\r\n  getName(id) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      return this.table[id].name;\r\n    }\r\n  }\r\n\r\n  setName(id, name) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      this.table[id].name = name;\r\n    }\r\n  }\r\n\r\n  getType(id) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      return this.table[id].type;\r\n    }\r\n  }\r\n\r\n  setType(id, type) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      this.table[id].type = type;\r\n    }\r\n  }\r\n\r\n  getColor(id) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      return this.table[id].color;\r\n    }\r\n  }\r\n\r\n  setColor(id, color) {\r\n    if (id >= 0 && id < this.nextRoleID) {\r\n      this.table[id].color = color;\r\n    }\r\n  }\r\n\r\n  getRoleIdByName(name) {\r\n    let roleArray = Object.values(this.table);\r\n    for (let i = 0; i < roleArray.length; i++) {\r\n      if (roleArray[i].name === name) {\r\n        return roleArray[i].id;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // add a role by its name and type and return its ID,\r\n  // except the name has already occurred in the role table (return its id)\r\n  addRole(roleName, roleType, roleColor) {\r\n    let existRoleID = this.getRoleIdByName(roleName);\r\n    if (existRoleID || existRoleID === 0) {\r\n      return existRoleID;\r\n    } else {\r\n      this.table[this.nextRoleID] = new Role(this.nextRoleID, roleName, roleType, roleColor);\r\n      this.nextRoleID += 1;\r\n      return this.nextRoleID - 1;\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  Role,\r\n  RoleTable,\r\n};","import Token, {BlockBegin, BlockEnd, Action, Command, Comment, EOF} from './Token';\r\nimport {RoleTable} from './Role';\r\n\r\nconst getRandomHSLAColor = (minH, maxH, minS, maxS, minL, maxL, minA, maxA) => {\r\n  const getRandomNumber = (low, high) => {\r\n    return Math.round(Math.random() * (high - low)) + low;\r\n  }\r\n\r\n  let hue = getRandomNumber(minH, maxH);\r\n  let saturation = getRandomNumber(minS, maxS);\r\n  let lightness = getRandomNumber(minL, maxL);\r\n  let alpha = getRandomNumber(minA * 100, maxA * 100) / 100;\r\n\r\n  return `hsl(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\r\n}\r\n\r\nclass LogScanner {\r\n  constructor(rawLogData) {\r\n    this.rawLogData = rawLogData;\r\n    this.tokenSequence = [];\r\n    this.roleTable = new RoleTable();\r\n  }\r\n\r\n  analyze() {\r\n    let logArray = this.rawLogData.split('\\n').map((str) => str.trim());\r\n    let tokenID = 0;\r\n    let lastRoleName = '';\r\n    let bufferActionContent = '';\r\n    logArray.forEach((line, _) => {\r\n      let bracketContent = line.match(/<.+>/);  // <xxx>\r\n      if (bracketContent) {\r\n        if (bufferActionContent !== '') {\r\n          let roleID = this.roleTable.addRole(lastRoleName, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n          this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n          bufferActionContent = '';\r\n          tokenID += 1;\r\n        }\r\n        bracketContent = bracketContent[0];\r\n        let skipBracketContent = bracketContent.slice(1,\r\n          bracketContent.length - 1);  // <xxx> without <>\r\n        if (skipBracketContent === '{') {\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, BlockBegin, null, null));\r\n        } else if (skipBracketContent === '}') {\r\n          this.tokenSequence.push(new Token(tokenID, BlockEnd, null, null));\r\n        } else {\r\n          let tokenContent = line.split('>')[1].trim();\r\n          let roleID = this.roleTable.addRole(skipBracketContent, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n          if (tokenContent[0] === '(' || tokenContent[0] === '（') {\r\n            this.tokenSequence.push(\r\n              new Token(tokenID, Comment, roleID, tokenContent));\r\n            lastRoleName = '';\r\n          } else if (tokenContent[0] === '.') {\r\n            this.tokenSequence.push(\r\n              new Token(tokenID, Command, roleID, tokenContent));\r\n            lastRoleName = '';\r\n          } else {\r\n            bufferActionContent += tokenContent;\r\n            lastRoleName = skipBracketContent;\r\n            tokenID -= 1;\r\n          }\r\n        }\r\n      } else {\r\n        let roleID = this.roleTable.addRole(lastRoleName, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n        if (line[0] === '(' || line[0] === '（') {\r\n          if (bufferActionContent !== '') {\r\n            this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n            bufferActionContent = '';\r\n            tokenID += 1;\r\n          }\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, Comment, roleID, line));\r\n        } else if (line[0] === '.') {\r\n          if (bufferActionContent !== '') {\r\n            this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n            bufferActionContent = '';\r\n          }\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, Command, roleID, line));\r\n        } else {\r\n          bufferActionContent += '\\n' + line;\r\n          tokenID -= 1;\r\n        }\r\n      }\r\n      tokenID += 1;\r\n    });\r\n    if (bufferActionContent !== '') {\r\n      let roleID = this.roleTable.addRole(lastRoleName, 'pc', getRandomHSLAColor(0, 360, 20, 80, 0, 75, 1, 1));\r\n      // push action token at last line\r\n      this.tokenSequence.push(new Token(tokenID, Action, roleID, bufferActionContent));\r\n      bufferActionContent = '';\r\n    }\r\n    this.tokenSequence.push(new Token(tokenID + 1, EOF, null, null));\r\n    return this.tokenSequence;\r\n  }\r\n}\r\n\r\nexport default LogScanner;","import React from 'react';\r\nimport {IconButton, Popover} from \"@material-ui/core\";\r\nimport {FormatColorText} from \"@material-ui/icons\";\r\nimport {SketchPicker} from \"react-color\";\r\nimport PopupState, {bindTrigger, bindPopover} from 'material-ui-popup-state';\r\n\r\nclass ColorPicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      color: this.props.color\r\n    }\r\n  }\r\n\r\n  handleChange = (color) => {\r\n    this.setState({color: color.hex})\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <PopupState variant=\"popover\" popupId=\"color-picker-popup-popover\">\r\n        {(popupState) => (\r\n          <div>\r\n            <IconButton\r\n              style={{color: this.state.color}}\r\n              aria-label=\"change color\"\r\n              component=\"span\"\r\n              {...bindTrigger(popupState)}>\r\n              <FormatColorText/>\r\n            </IconButton>\r\n            <Popover\r\n              {...bindPopover(popupState)}\r\n              anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n              }}\r\n              transformOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n              }}\r\n            >\r\n              <SketchPicker color={this.state.color}\r\n                            onChange={this.handleChange}\r\n                            onChangeComplete={this.props.onChangeComplete}/>\r\n            </Popover>\r\n          </div>\r\n        )}\r\n      </PopupState>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ColorPicker;","import React from \"react\";\r\nimport {\r\n  Input,\r\n  InputLabel,\r\n  MenuItem,\r\n  FormControl,\r\n  ListItemText,\r\n  Select,\r\n  Checkbox,\r\n  Chip,\r\n  TextField,\r\n  Button,\r\n  withStyles, List, ListItem, ListItemIcon, Grid, ListSubheader\r\n} from \"@material-ui/core\";\r\nimport {Check} from \"@material-ui/icons\";\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nconst styles = (theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    maxWidth: 240\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  chip: {\r\n    marginTop: 2,\r\n    marginRight: 2,\r\n    marginBottom: 2,\r\n    maxWidth: 100,\r\n    overflow: 'hidden',\r\n    label: {\r\n      overflow: 'hidden',\r\n    }\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3)\r\n  }\r\n});\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250\r\n    }\r\n  }\r\n};\r\n\r\nclass RoleConfigurator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      kpList: [],\r\n      dicerList: [],\r\n      roleTable: this.props.roleTable,\r\n    }\r\n\r\n    this.handleKpChange = this.handleKpChange.bind(this);\r\n    this.handleDicerChange = this.handleDicerChange.bind(this);\r\n    this.handleRoleNameChange = this.handleRoleNameChange.bind(this);\r\n    this.handleColorChange = this.handleColorChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleKpChange(event) {\r\n    let tempRoleTable = this.state.roleTable;\r\n    let newKpList = event.target.value;\r\n    Object.keys(tempRoleTable.table).forEach((roleID) => {\r\n      tempRoleTable.setType(roleID, 'pc');\r\n    })\r\n    newKpList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'kp');\r\n    });\r\n    this.state.dicerList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'dicer');\r\n    });\r\n    this.setState({\r\n      kpList: newKpList,\r\n      roleTable: tempRoleTable\r\n    });\r\n  }\r\n\r\n  handleDicerChange(event) {\r\n    let tempRoleTable = this.state.roleTable;\r\n    let newDicerList = event.target.value;\r\n    Object.keys(tempRoleTable.table).forEach((roleID) => {\r\n      tempRoleTable.setType(roleID, 'pc');\r\n    })\r\n    this.state.kpList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'kp');\r\n    });\r\n    newDicerList.forEach((role) => {\r\n      tempRoleTable.setType(role, 'dicer');\r\n    });\r\n    this.setState({\r\n      dicerList: newDicerList,\r\n      roleTable: tempRoleTable\r\n    });\r\n  }\r\n\r\n  handleRoleNameChange(roleID, newRoleName) {\r\n    let tempRoleTable = this.state.roleTable;\r\n    tempRoleTable.setName(roleID, newRoleName);\r\n    this.setState({roleTable: tempRoleTable});\r\n  }\r\n\r\n  handleColorChange(roleID, newRoleColor) {\r\n    let tempRoleTable = this.state.roleTable;\r\n    tempRoleTable.setColor(roleID, newRoleColor);\r\n    this.setState({roleTable: tempRoleTable});\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.onSubmit(this.state.roleTable);\r\n  }\r\n\r\n  render() {\r\n    const classes = this.props.classes;\r\n\r\n    const kpTable = Object.keys(this.state.roleTable.table)\r\n      .filter((roleID) => this.state.roleTable.getType(roleID) === 'kp');\r\n    const dicerTable = Object.keys(this.state.roleTable.table)\r\n      .filter((roleID) => this.state.roleTable.getType(roleID) === 'dicer');\r\n    const pcTable = Object.keys(this.state.roleTable.table)\r\n      .filter((roleID) => this.state.roleTable.getType(roleID) === 'pc');\r\n\r\n    const generateListItem = (roleID) => (\r\n      <ListItem key={roleID} dense disableGutters={true} style={{justifyContent: 'center'}}>\r\n        <TextField\r\n          id={\"text-field-role\" + roleID}\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          key={'text-' + roleID}\r\n          InputProps={{\r\n            style: {color: this.state.roleTable.getColor(roleID)}\r\n          }}\r\n          value={this.state.roleTable.getName(roleID)}\r\n          onChange={(event) => {\r\n            this.handleRoleNameChange(roleID, event.target.value);\r\n          }}\r\n        />\r\n        <ListItemIcon key={'icon-' + roleID} style={{minWidth: 0}}>\r\n          <ColorPicker id={roleID}\r\n                       color={this.state.roleTable.getColor(roleID)}\r\n                       onChangeComplete={(color) => {\r\n                         this.handleColorChange(roleID, color.hex)\r\n                       }}/>\r\n        </ListItemIcon>\r\n      </ListItem>);\r\n\r\n    return ([\r\n      <Grid container key='kp-and-dicer-configurator-grid'>\r\n        <Grid item xs align='right'>\r\n          <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"kp-selection-checkbox-label\">Select KP</InputLabel>\r\n            <Select\r\n              labelId=\"kp-selection-checkbox-label\"\r\n              id=\"kp-selection-checkbox\"\r\n              multiple\r\n              value={this.state.kpList}\r\n              onChange={this.handleKpChange}\r\n              input={<Input/>}\r\n              renderValue={(selected) => (\r\n                <div className={classes.chips}>\r\n                  {selected.map((value) => (\r\n                    <Chip key={value}\r\n                          label={this.state.roleTable.getName(value)}\r\n                          className={classes.chip}\r\n                          size=\"small\"/>\r\n                  ))}\r\n                </div>\r\n              )}\r\n              MenuProps={MenuProps}\r\n            >\r\n              {Object.keys(this.state.roleTable.table).map((roleID) => {\r\n                if (!this.state.dicerList.includes(roleID)) {\r\n                  return (\r\n                    <MenuItem key={roleID} value={roleID}>\r\n                      <Checkbox checked={this.state.kpList.includes(roleID)}/>\r\n                      <ListItemText primary={this.state.roleTable.getName(roleID)}/>\r\n                    </MenuItem>\r\n                  )\r\n                } else {\r\n                  return null;\r\n                }\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs align='left'>\r\n          <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"dicer-selection-checkbox-label\">Select dicer</InputLabel>\r\n            <Select\r\n              labelId=\"dicer-selection-checkbox-label\"\r\n              id=\"dicer-selection-checkbox\"\r\n              multiple\r\n              value={this.state.dicerList}\r\n              onChange={this.handleDicerChange}\r\n              input={<Input/>}\r\n              renderValue={(selected) => (\r\n                <div className={classes.chips}>\r\n                  {selected.map((value) => (\r\n                    <Chip key={value}\r\n                          label={this.state.roleTable.getName(value)}\r\n                          className={classes.chip}\r\n                          size=\"small\"/>\r\n                  ))}\r\n                </div>\r\n              )}\r\n              MenuProps={MenuProps}\r\n            >\r\n              {Object.keys(this.state.roleTable.table).map((roleID) => {\r\n                if (!this.state.kpList.includes(roleID)) {\r\n                  return (\r\n                    <MenuItem key={roleID} value={roleID}>\r\n                      <Checkbox checked={this.state.dicerList.includes(roleID)}/>\r\n                      <ListItemText primary={this.state.roleTable.getName(roleID)}/>\r\n                    </MenuItem>\r\n                  );\r\n                } else {\r\n                  return null;\r\n                }\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </Grid>,\r\n      <Grid container key='name-and-color-configurator-grid'>\r\n        <Grid item xs align='center'>\r\n          <List dense>\r\n            {kpTable.length !== 0 && <ListSubheader key=\"kp\" disableSticky>KP</ListSubheader>}\r\n            {kpTable.map((roleID) => generateListItem(roleID))}\r\n            {dicerTable.length !== 0 && <ListSubheader key=\"dicer\" disableSticky>Dicer</ListSubheader>}\r\n            {dicerTable.map((roleID) => generateListItem(roleID))}\r\n            {pcTable.length !== 0 && <ListSubheader key=\"pc\" disableSticky>PC</ListSubheader>}\r\n            {pcTable.map((roleID) => generateListItem(roleID))}\r\n          </List>\r\n        </Grid>\r\n      </Grid>,\r\n      <Grid container key='apply-button-grid' style={{marginBottom: '1em'}}>\r\n        <Grid item xs align='center'>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            endIcon={<Check/>}\r\n            onClick={this.handleClick}>\r\n            Apply\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    ]);\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(RoleConfigurator);","import React from 'react';\r\nimport {Button, Checkbox, Divider, Grid, List, ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport {Description} from \"@material-ui/icons\";\r\n\r\nclass LogFilter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      logFilter: this.props.logFilter\r\n    }\r\n\r\n    this.handleRoleChange = this.handleRoleChange.bind(this);\r\n    this.handleCommandChange = this.handleCommandChange.bind(this);\r\n    this.handleCommentChange = this.handleCommentChange.bind(this);\r\n  }\r\n\r\n  handleRoleChange(roleID) {\r\n    let tempLogFilter = this.state.logFilter;\r\n    tempLogFilter.role[roleID] = !tempLogFilter.role[roleID];\r\n    this.setState({logFilter: tempLogFilter});\r\n  }\r\n\r\n  handleCommandChange() {\r\n    let tempLogFilter = this.state.logFilter;\r\n    tempLogFilter.command = !tempLogFilter.command;\r\n    this.setState({logFilter: tempLogFilter});\r\n  }\r\n\r\n  handleCommentChange() {\r\n    let tempLogFilter = this.state.logFilter;\r\n    tempLogFilter.comment = !tempLogFilter.comment;\r\n    this.setState({logFilter: tempLogFilter});\r\n  }\r\n\r\n  render() {\r\n    let filterElement = [];\r\n    if (this.state.logFilter.role) {\r\n      for (let role in this.state.logFilter.role) {\r\n        if (this.props.roleTable.getType(role) === 'pc') {\r\n          filterElement.push(\r\n            <ListItem key={role} button onClick={() => this.handleRoleChange(role)}>\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  edge=\"start\"\r\n                  checked={this.state.logFilter.role[role]}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={'label-role-' + role} primary={this.props.roleTable.getName(role)} />\r\n            </ListItem>\r\n          );\r\n        }\r\n      }\r\n      filterElement.push(<Divider/>);\r\n      filterElement.push(\r\n        <ListItem key='command' button onClick={this.handleCommandChange}>\r\n          <ListItemIcon>\r\n            <Checkbox\r\n              edge=\"start\"\r\n              checked={this.state.logFilter.command}\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText id={'label-command'} primary='Command'/>\r\n        </ListItem>);\r\n      filterElement.push(\r\n        <ListItem key='comment' button onClick={this.handleCommentChange}>\r\n          <ListItemIcon>\r\n            <Checkbox\r\n              edge=\"start\"\r\n              checked={this.state.logFilter.comment}\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText id={'label-comment'} primary='Comment'/>\r\n        </ListItem>);\r\n    }\r\n    if (filterElement.length !== 0) {\r\n      return (\r\n        <Grid container direction=\"column\"\r\n              justifyContent=\"center\" alignItems=\"center\"\r\n              style={{marginBottom: '3em'}}>\r\n          <Grid item sm align='center'>\r\n            <List dense disablePadding>\r\n              {filterElement}\r\n            </List>\r\n          </Grid>\r\n          <Grid item sm align='center'>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              component=\"span\"\r\n              endIcon={<Description/>}\r\n              onClick={this.props.onSubmit}>\r\n              Render\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    } else {\r\n      return <div/>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default LogFilter;","import React from \"react\";\r\nimport {Block} from \"./LogParser\";\r\nimport {Typography, withStyles} from \"@material-ui/core\";\r\nimport {TreeItem, TreeView} from \"@material-ui/lab\";\r\nimport {ChevronRight, ExpandMore} from \"@material-ui/icons\";\r\n\r\nconst styles = (theme) => ({\r\n  \"@global\": {\r\n    \".MuiTreeItem-root.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n      backgroundColor: \"white\"\r\n    },\r\n    \".MuiTreeItem-root.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label:hover, .MuiTreeItem-root.Mui-selected:focus > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n      backgroundColor: \"gray\"\r\n    }\r\n  }\r\n});\r\n\r\nclass LogRender extends React.Component {\r\n  render() {\r\n    const classes = this.props.classes;\r\n\r\n    const CustomTreeItem = withStyles({\r\n      root: {\r\n        // \"&.MuiTreeItem-root.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label:hover\": {\r\n        //   background: 'transparent'\r\n        // },\r\n        // \"&.MuiTreeItem-root.Mui-selected:focus > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n        //   background: 'transparent'\r\n        // },\r\n        \"&.MuiTreeItem-root:focus > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n          background: 'transparent'\r\n        },\r\n        \"&.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label\": {\r\n          background: 'transparent'\r\n        },\r\n        \"&.MuiTreeItem-root > .MuiTreeItem-content:hover\": {\r\n          background: 'transparent'\r\n        },\r\n        \"&.MuiTreeItem-root > .MuiTreeItem-content:hover > .MuiTreeItem-label\": {\r\n          background: 'transparent'\r\n        }\r\n      },\r\n      group: {\r\n        marginLeft: 7,\r\n        paddingLeft: 18,\r\n        borderLeft: `1px dashed #33333333`,\r\n      },\r\n    })(TreeItem);\r\n\r\n    const renderTree = (node) => {\r\n      if (node.type !== Block) {\r\n        let labelContent = <Typography key={node.id}\r\n                                       style={{color: this.props.roleTable.getColor(node.role)}}>\r\n          {`<${this.props.roleTable.getName(node.role)}> ${node.content}`}\r\n        </Typography>\r\n        return <CustomTreeItem key={node.id}\r\n                               nodeId={node.id.toString()}\r\n                               label={labelContent}/>\r\n      } else {\r\n        if (Array.isArray(node.children)) {\r\n          if (node.collapsed) {\r\n            let roleList = node.role.map((roleID) => {\r\n              if (this.props.roleTable.getType(roleID) === 'pc') {\r\n                return this.props.roleTable.getName(roleID)\r\n              } else {\r\n                return null;\r\n              }\r\n            }).filter((roleName) => roleName);\r\n            let labelContent = <Typography\r\n              style={{color: '#a2a2a2'}}>{`{${roleList.join(', ')}}`}</Typography>;\r\n            return (\r\n              <CustomTreeItem key={node.id} nodeId={node.id.toString()} label={labelContent}>\r\n                {node.children.map((node) => renderTree(node))}\r\n              </CustomTreeItem>\r\n            );\r\n          } else {\r\n            return node.children.map((node) => renderTree(node));\r\n          }\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.props.node) {\r\n      return (\r\n        <TreeView\r\n          className={classes.root}\r\n          defaultCollapseIcon={<ExpandMore/>}\r\n          defaultExpanded={['root']}\r\n          defaultExpandIcon={<ChevronRight/>}\r\n          disableSelection\r\n        >\r\n          {renderTree(this.props.node)}\r\n        </TreeView>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n    // let children = null;\r\n    // if (this.props.node && this.props.node.children !== 0) {\r\n    //   children = (\r\n    //     <ul style={{listStyleType: 'none', margin: 0}}>\r\n    //       {this.props.node.children.map((i) => (\r\n    //         <LogRender node={i} key={'log-node-' + i.id} roleTable={this.props.roleTable}/>\r\n    //       ))}\r\n    //     </ul>\r\n    //   );\r\n    //   if (this.props.node.type === Block) {\r\n    //     let blockRoles = this.props.node.role.map((roleID) => this.props.roleTable.getName(roleID)).join(', ');\r\n    //     if (this.props.node.id === 0) {\r\n    //       // not render the root Block node\r\n    //       return (<div>{children}</div>);\r\n    //     } else {\r\n    //       return (\r\n    //         <li>\r\n    //           <span>[{blockRoles}]</span>\r\n    //           {children}\r\n    //         </li>\r\n    //       );\r\n    //     }\r\n    //   } else {\r\n    //     return (\r\n    //       <li>\r\n    //         <span>&lt;{this.props.roleTable.getName(this.props.node.role)}&gt;</span> {this.props.node.content}\r\n    //         {children}\r\n    //       </li>\r\n    //     );\r\n    //   }\r\n    // } else {\r\n    //   return null;\r\n    // }\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(LogRender);","import React from \"react\";\r\nimport {Fab, Zoom, useScrollTrigger, makeStyles} from \"@material-ui/core\";\r\nimport {KeyboardArrowUp} from '@material-ui/icons'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    position: \"fixed\",\r\n    bottom: theme.spacing(3),\r\n    right: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nfunction ScrollTop(props) {\r\n  const { children } = props;\r\n  const classes = useStyles();\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 100\r\n  });\r\n\r\n  const handleClick = (event) => {\r\n    const anchor = (event.target.ownerDocument || document).querySelector(\r\n      \"#back-to-top-anchor\"\r\n    );\r\n    if (anchor) {\r\n      anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Zoom in={trigger}>\r\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\r\n        {children}\r\n      </div>\r\n    </Zoom>\r\n  );\r\n}\r\n\r\nexport default function BackToTopButton(props) {\r\n  return (\r\n    <ScrollTop {...props}>\r\n      <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\r\n        <KeyboardArrowUp />\r\n      </Fab>\r\n    </ScrollTop>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport {Button, Container, Grid} from '@material-ui/core';\r\nimport {Publish, Send} from '@material-ui/icons';\r\nimport LogScanner from './LogScanner';\r\nimport * as Token from './Token';\r\nimport RoleConfigurator from \"./RoleConfigurator\";\r\nimport LogFilter from \"./LogFilter\";\r\nimport LogRender from \"./LogRender\";\r\nimport BackToTopButton from \"./BackToTopButton\";\r\n\r\nexport const Start = Symbol('Start');\r\nexport const StartPrime = Symbol('Start\\'');\r\nexport const Block = Symbol('Block');\r\nexport const BlockBegin = Symbol('block-begin');\r\nexport const BlockEnd = Symbol('block-end');\r\nexport const ACC = Symbol('ACC');\r\nexport const Action = Symbol('action');\r\nexport const Command = Symbol('command');\r\nexport const Comment = Symbol('comment');\r\n\r\nclass ParseTreeNode {\r\n  constructor(type, content) {\r\n    this.type = type;\r\n    this.content = content;\r\n    this.children = [];\r\n  }\r\n\r\n  addChild = (node) => {\r\n    this.children.push(node);\r\n  };\r\n}\r\n\r\nclass SyntaxTreeNode {\r\n  constructor(id, type, role, content) {\r\n    this.id = id;\r\n    this.type = type;\r\n    this.role = role;\r\n    this.content = content;\r\n    this.children = [];\r\n  }\r\n\r\n  addChild = (node) => {\r\n    this.children.push(node);\r\n  };\r\n}\r\n\r\nclass LogParser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedFile: null,\r\n      parseTreeRoot: null,\r\n      syntaxTreeRoot: null,\r\n      filteredTreeRoot: null,\r\n      roleTable: null,\r\n      logFilter: {},   // e.g.: {\"role\": {0: true, 1: false, ...}], \"command\": true, \"comment\": true}\r\n    };\r\n    this.handleFileChange = this.handleFileChange.bind(this);\r\n    this.handleFileRead = this.handleFileRead.bind(this);\r\n    this.handleFileUpload = this.handleFileUpload.bind(this);\r\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\r\n    this.handleRoleTableChange = this.handleRoleTableChange.bind(this);\r\n    this.filterNodeByRole = this.filterNodeByRole.bind(this);\r\n  }\r\n\r\n  // syntax:\r\n  //\r\n  // Start -> Block Start' | ACC Start'\r\n  // Start' -> Block Start' | ACC Start' | empty\r\n  // Block -> block-begin Start' block-end\r\n  // ACC -> action | command | comment\r\n  parse(tokenSequence) {\r\n    let tokenIndex = 0;\r\n    const getToken = () => tokenSequence[tokenIndex];\r\n    const nextToken = () => tokenIndex += 1;\r\n\r\n    let parseProgram = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        node.addChild(new ParseTreeNode(Block, null));\r\n        if (parseBlock(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else if (token.type === Token.Action || token.type === Token.Command ||\r\n        token.type === Token.Comment) {\r\n        node.addChild(new ParseTreeNode(ACC, null));\r\n        if (parseACC(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else {\r\n        console.log(`Error parsing at ${token}.`);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    let parseStartPrime = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        node.addChild(new ParseTreeNode(Block, null));\r\n        if (parseBlock(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else if (token.type === Token.Action || token.type === Token.Command ||\r\n        token.type === Token.Comment) {\r\n        node.addChild(new ParseTreeNode(ACC, null));\r\n        if (parseACC(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else {\r\n        return true;    // for Start' -> empty\r\n      }\r\n    };\r\n\r\n    let parseBlock = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        node.addChild(new ParseTreeNode(BlockBegin, token));\r\n        nextToken();\r\n        node.addChild(new ParseTreeNode(StartPrime, null));\r\n        if (parseStartPrime(node.children[1])) {\r\n          node.addChild(new ParseTreeNode(BlockEnd, getToken()));\r\n          if (getToken().type === Token.BlockEnd) {\r\n            nextToken();\r\n            return true;\r\n          } else {\r\n            console.log(\r\n              `Error parsing at ${getToken()}, should be <block-end>.`);\r\n          }\r\n        }\r\n      } else {\r\n        console.log(`Error parsing at ${getToken()}, should be <block-begin>.`);\r\n      }\r\n    };\r\n\r\n    let parseACC = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.Action) {\r\n        node.addChild(new ParseTreeNode(Action, token));\r\n        nextToken();\r\n        return true;\r\n      } else if (token.type === Token.Command) {\r\n        node.addChild(new ParseTreeNode(Command, token));\r\n        nextToken();\r\n        return true;\r\n      } else if (token.type === Token.Comment) {\r\n        node.addChild(new ParseTreeNode(Comment, token));\r\n        nextToken();\r\n        return true;\r\n      } else {\r\n        console.log(\r\n          `Error parsing at ${token}, should be <action> or <command> or <comment>.`);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    let startNode = new ParseTreeNode(Start);\r\n    if (parseProgram(startNode)) {\r\n      return startNode;\r\n    } else {\r\n      console.log('Failed to parse the code.');\r\n    }\r\n  }\r\n\r\n  buildSyntaxTree(rootNode) {\r\n    let nodeID = 1;\r\n    let buildSyntaxTreeNode = (originNode, buildRootNode) => {\r\n      if (originNode.type === Block) {\r\n        buildRootNode.addChild(new SyntaxTreeNode(nodeID, Block, [], null));\r\n      } else if (originNode.type === Action || originNode.type === Command ||\r\n        originNode.type === Comment) {\r\n        buildRootNode.addChild(\r\n          new SyntaxTreeNode(nodeID, originNode.type, originNode.content.roleID,\r\n            originNode.content.content));\r\n      } else {\r\n        // do nothing\r\n        return false;\r\n      }\r\n      nodeID += 1;\r\n      return buildRootNode.children[buildRootNode.children.length - 1];\r\n    };\r\n\r\n    let buildFullSyntaxTree = (parseTreeNode, syntaxTreeNode) => {\r\n      if (parseTreeNode) {\r\n        let buildChildNode = buildSyntaxTreeNode(parseTreeNode, syntaxTreeNode);\r\n        if (buildChildNode) {\r\n          parseTreeNode.children.forEach(\r\n            (child, _) => buildFullSyntaxTree(child, buildChildNode));\r\n        } else {\r\n          parseTreeNode.children.forEach(\r\n            (child, _) => buildFullSyntaxTree(child, syntaxTreeNode));\r\n        }\r\n      }\r\n    };\r\n\r\n    let syntaxTreeRoot = new SyntaxTreeNode(0, Block, [], null);  // global block containing all roles\r\n    buildFullSyntaxTree(rootNode, syntaxTreeRoot);\r\n    return syntaxTreeRoot;\r\n  }\r\n\r\n  // traverse syntax tree in post order to update \"role\" in Block nodes\r\n  updateRole(rootNode) {\r\n    if (rootNode) {\r\n      if (rootNode.type === Block) {\r\n        let roleArray = rootNode.role;\r\n        rootNode.children.forEach(\r\n          (child, _) => roleArray = roleArray.concat(this.updateRole(child)));\r\n        rootNode.role = [...new Set(roleArray)].sort();\r\n      }\r\n      return rootNode.role;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  initializeLogFilter() {\r\n    let roleDict = {};\r\n    this.state.syntaxTreeRoot.role.forEach((role) => roleDict[role] = true);\r\n    let tempLogFilter = {\r\n      'role': roleDict,\r\n      'command': true,\r\n      'comment': true,\r\n    };\r\n    this.setState({logFilter: tempLogFilter});\r\n  }\r\n\r\n  handleFileChange(event) {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n    });\r\n  }\r\n\r\n  handleFileRead(event) {\r\n    let content = event.target.result;\r\n    let logScanner = new LogScanner(content);\r\n    let tokenSequence = logScanner.analyze();\r\n    let parseTree = this.parse(tokenSequence);\r\n    let syntaxTree = this.buildSyntaxTree(parseTree);\r\n    this.setState({\r\n      parseTreeRoot: parseTree,\r\n      syntaxTreeRoot: syntaxTree,\r\n      roleTable: logScanner.roleTable,\r\n    });\r\n    this.updateRole(this.state.syntaxTreeRoot);\r\n    this.initializeLogFilter();\r\n  }\r\n\r\n  handleFileUpload() {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = this.handleFileRead;\r\n    fileReader.readAsText(this.state.selectedFile);\r\n  }\r\n\r\n  handleCheckboxChange(newLogFilter) {\r\n    this.setState({logFilter: newLogFilter});\r\n  }\r\n\r\n  handleRoleTableChange(newRoleTable) {\r\n    this.setState({roleTable: newRoleTable});\r\n  }\r\n\r\n  // post-order traversal to delete nodes add update collapse states according to role filter checkboxes\r\n  // deletion rule:\r\n  //   1. If none of the reserved roles appear in the Block (except kp and dicer), delete the Block (and its children) node.\r\n  //   2. If is a action / command / comment node and is filtered out according to the checkboxes, delete it.\r\n  // collapsing rule:\r\n  //   If there exists a reserved role that does not appear in the Block node, collapse the node.\r\n  filterNodeByRole() {\r\n    // get all reserved roles from rileFilter\r\n    let reservedRoleArray = [];\r\n    Object.keys(this.state.logFilter.role).forEach((roleID) => {\r\n      if (this.state.roleTable.getType(roleID) === 'pc' && this.state.logFilter.role[roleID]) {\r\n        reservedRoleArray.push(roleID);\r\n      }\r\n    });\r\n    reservedRoleArray = reservedRoleArray.map((roleID) => parseInt(roleID));\r\n\r\n    let isIntersectionEmpty = (array1, array2) => {\r\n      return !array1.map((item) => array2.includes(item)).includes(true);\r\n    };\r\n\r\n    let isSubsetOf = (array1, array2) => {\r\n      return array1.every((value) => array2.includes(value));\r\n    }\r\n\r\n    let filteredTree = _.cloneDeep(this.state.syntaxTreeRoot);\r\n\r\n    let traverseFilter = (node, parentNode) => {\r\n      if (node) {\r\n        // make a clone to prevent wrong index made by deletion in iteration\r\n        node.children.slice(0)\r\n          .forEach((child, _) => traverseFilter(child, node));\r\n        if (node.type === Block) {\r\n          node.collapsed = !isSubsetOf(reservedRoleArray, node.role);\r\n          if ((node.children.length === 0 && parentNode) ||\r\n            isIntersectionEmpty(node.role, reservedRoleArray)) {\r\n            // Block is empty or no reserved roles appear\r\n            let toDeleteIndex = parentNode.children.findIndex(\r\n              (child) => child.id === node.id);\r\n            parentNode.children.splice(toDeleteIndex, 1);\r\n            node = null;\r\n          }\r\n        } else {\r\n          node.collapsed = false;\r\n          // check for filtering command / comment\r\n          if ((node.type === Command && (!this.state.logFilter.command)) ||\r\n            (node.type === Comment && (!this.state.logFilter.comment))) {\r\n            let toDeleteIndex = parentNode.children.findIndex(\r\n              (child) => child.id === node.id);\r\n            parentNode.children.splice(toDeleteIndex, 1);\r\n            node = null;\r\n          }\r\n        }\r\n      }\r\n    };\r\n    traverseFilter(filteredTree, null);\r\n    this.updateRole(filteredTree);\r\n    this.setState({filteredTreeRoot: filteredTree});\r\n  }\r\n\r\n  render() {\r\n    return ([\r\n      <div id=\"back-to-top-anchor\" key='back-to-top-anchor'/>,\r\n      <BackToTopButton key='back-to-top-button'/>,\r\n      <Grid key='handle-file-grid' container spacing={1} direction='column'>\r\n        <Grid item xs align='center'>\r\n          <input\r\n            hidden\r\n            id=\"contained-button-file\"\r\n            accept=\"text/plain,.log\"\r\n            type=\"file\"\r\n            onChange={this.handleFileChange}\r\n          />\r\n          <label htmlFor=\"contained-button-file\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"default\"\r\n              component=\"span\"\r\n              endIcon={<Publish/>}\r\n            >\r\n              Browse\r\n            </Button>\r\n          </label>\r\n        </Grid>\r\n        {this.state.selectedFile &&\r\n        <Grid item xs align='center'>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            component=\"span\"\r\n            endIcon={<Send/>}\r\n            onClick={this.handleFileUpload}>\r\n            Submit\r\n          </Button>\r\n        </Grid>}\r\n      </Grid>,\r\n      <Grid container key='role-configurator-grid'>\r\n        {this.state.roleTable &&\r\n        <RoleConfigurator key='role-configurator'\r\n                          roleTable={_.cloneDeep(this.state.roleTable)}\r\n                          onSubmit={this.handleRoleTableChange}/>\r\n        }\r\n      </Grid>,\r\n      <hr hidden={!this.state.roleTable} key='hr'/>,\r\n      <Grid container key='role-filter-grid'>\r\n        {this.state.logFilter.hasOwnProperty('role') &&\r\n        <LogFilter key='filter'\r\n                   logFilter={this.state.logFilter}\r\n                   roleTable={this.state.roleTable}\r\n                   onSubmit={this.filterNodeByRole}/>\r\n        }\r\n      </Grid>,\r\n      <Container key='log-render-container' maxWidth=\"md\">\r\n        {Object.keys(this.state.logFilter).length > 0 &&\r\n        <LogRender key='render'\r\n                   node={this.state.filteredTreeRoot}\r\n                   roleTable={this.state.roleTable}/>}\r\n      </Container>\r\n    ]);\r\n  }\r\n}\r\n\r\nexport default LogParser;","import {createTheme, ThemeProvider, CssBaseline, Container} from \"@material-ui/core\";\r\nimport LogParser from './LogParser';\r\n\r\nconst theme = createTheme({\r\n  overrides: {\r\n    MuiCssBaseline: {\r\n      \"@global\": {\r\n        body: {\r\n          height: '100%',\r\n          width: '100%',\r\n          fontFamily: \"-apple-system, 'Helvetica Neue', Helvetica ,Arial, 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', 'Microsoft Yahei', sans-serif\",\r\n          '-webkit-font-smoothing': 'antialiased',\r\n          '-moz-osx-font-smoothing': 'grayscale',\r\n        },\r\n        code: {\r\n          fontFamily: \"source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace\",\r\n        },\r\n        header: {\r\n          textAlign: 'center',\r\n          marginTop: '3em',\r\n          marginBottom: '3em'\r\n        }\r\n      }\r\n    },\r\n    Grid: {\r\n      alignItems: 'center',\r\n      justifyContent: 'center'\r\n    }\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"md\" style={{marginBottom: '80px'}}>\r\n        <header>\r\n          <h1>\r\n            es-logger\r\n          </h1>\r\n          <h3>\r\n            A simple logger for CoC.\r\n          </h3>\r\n        </header>\r\n        <LogParser />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}