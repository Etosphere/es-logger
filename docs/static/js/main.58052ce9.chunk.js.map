{"version":3,"sources":["Token.js","LogScanner.js","RoleFilter.js","LogParser.js","App.js","reportWebVitals.js","index.js"],"names":["BlockBegin","Symbol","BlockEnd","Action","Command","Comment","EOF","Token","id","tokenType","role","content","this","type","LogScanner","rawLogData","tokenSequence","logArray","split","map","str","trim","tokenID","lastSkipBracketContent","bufferActionContent","forEach","line","_","bracketContent","match","push","skipBracketContent","slice","length","tokenContent","RoleFilter","props","handleChange","bind","event","target","attributes","getNamedItem","value","nodeType","tempRoleFilter","roleFilter","onChange","filterElement","Object","keys","tempFilterElement","checked","onSubmit","React","Component","Start","StartPrime","Block","ACC","ParseTreeNode","addChild","node","children","SyntaxTreeNode","LogParser","state","selectedFile","parseTreeRoot","syntaxTreeRoot","outputHTML","handleFileChange","handleFileRead","handleFileUpload","handleCheckboxChange","tokenIndex","getToken","nextToken","parseStartPrime","token","parseBlock","parseACC","console","log","startNode","parseProgram","rootNode","nodeID","buildSyntaxTree","parseTreeNode","syntaxTreeNode","buildChildNode","originNode","buildRootNode","buildSyntaxTreeNode","child","roleArray","concat","updateRole","Set","sort","setState","files","result","analyze","parseTree","parse","syntaxTree","JSON","stringify","initializeRoleFilter","preventDefault","fileReader","FileReader","onload","readAsText","newRoleFilter","filteredTree","cloneDeep","traverseFilter","parentNode","toDeleteIndex","findIndex","splice","typeName","toString","substring","onClick","e","filterNodeByRole","dangerouslySetInnerHTML","__html","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58052ce9.chunk.js","sourcesContent":["export const BlockBegin = Symbol('block-begin');\r\nexport const BlockEnd = Symbol('block-end');\r\nexport const Action = Symbol('action');\r\nexport const Command = Symbol('command');\r\nexport const Comment = Symbol('comment');\r\nexport const EOF = Symbol('eof');\r\n\r\nexport default class Token {\r\n  constructor(id, tokenType, role, content) {\r\n    this.id = id;\r\n    this.type = tokenType;\r\n    this.role = role;\r\n    this.content = content;\r\n  }\r\n}","import Token, {BlockBegin, BlockEnd, Action, Command, Comment, EOF} from './Token';\r\n\r\nclass LogScanner {\r\n  constructor(rawLogData) {\r\n    this.rawLogData = rawLogData;\r\n    this.tokenSequence = [];\r\n  }\r\n\r\n  analyze() {\r\n    let logArray = this.rawLogData.split('\\n').map((str) => str.trim());\r\n    let tokenID = 0;\r\n    let lastSkipBracketContent = '';\r\n    let bufferActionContent = '';\r\n    logArray.forEach((line, _) => {\r\n      let bracketContent = line.match(/<.+>/);  // <xxx>\r\n      if (bracketContent) {\r\n        if (bufferActionContent !== '') {\r\n          this.tokenSequence.push(new Token(tokenID, Action, lastSkipBracketContent, bufferActionContent));\r\n          bufferActionContent = '';\r\n        }\r\n        bracketContent = bracketContent[0];\r\n        let skipBracketContent = bracketContent.slice(1,\r\n          bracketContent.length - 1);  // <xxx> without <>\r\n        if (skipBracketContent === '{') {\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, BlockBegin, null, null));\r\n        } else if (skipBracketContent === '}') {\r\n          this.tokenSequence.push(new Token(tokenID, BlockEnd, null, null));\r\n        } else {\r\n          let tokenContent = line.split('>')[1].trim();\r\n          if (tokenContent[0] === '(' || tokenContent[0] === '（') {\r\n            this.tokenSequence.push(\r\n              new Token(tokenID, Comment, skipBracketContent, tokenContent));\r\n            lastSkipBracketContent = '';\r\n          } else if (tokenContent[0] === '.') {\r\n            this.tokenSequence.push(\r\n              new Token(tokenID, Command, skipBracketContent, tokenContent));\r\n            lastSkipBracketContent = '';\r\n          } else {\r\n            bufferActionContent += tokenContent;\r\n            lastSkipBracketContent = skipBracketContent;\r\n          }\r\n        }\r\n      } else {\r\n        if (line[0] === '(' || line[0] === '（') {\r\n          if (bufferActionContent !== '') {\r\n            this.tokenSequence.push(new Token(tokenID, Action, lastSkipBracketContent, bufferActionContent));\r\n            bufferActionContent = '';\r\n          }\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, Comment, lastSkipBracketContent, line));\r\n        } else if (line[0] === '.') {\r\n          if (bufferActionContent !== '') {\r\n            this.tokenSequence.push(new Token(tokenID, Action, lastSkipBracketContent, bufferActionContent));\r\n            bufferActionContent = '';\r\n          }\r\n          this.tokenSequence.push(\r\n            new Token(tokenID, Command, lastSkipBracketContent, line));\r\n        } else {\r\n          bufferActionContent += '\\n' + line;\r\n        }\r\n      }\r\n      tokenID += 1;\r\n    });\r\n    this.tokenSequence.push(new Token(tokenID, EOF, null, null));\r\n    return this.tokenSequence;\r\n  }\r\n}\r\n\r\nexport default LogScanner;","import React from 'react';\r\n\r\nclass RoleFilter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    let role = event.target.attributes.getNamedItem('data-role').value;\r\n    let nodeType = event.target.attributes.getNamedItem('data-node-type').value;\r\n    let tempRoleFilter = this.props.roleFilter;\r\n    tempRoleFilter[role][nodeType] = !tempRoleFilter[role][nodeType];\r\n    this.props.onChange(tempRoleFilter);\r\n  }\r\n\r\n  render() {\r\n    let filterElement = [];\r\n    Object.keys(this.props.roleFilter).forEach((role) => {\r\n      let value = this.props.roleFilter[role];\r\n      let tempFilterElement = [];\r\n      Object.keys(value).forEach((nodeType) => {\r\n        let checked = value[nodeType];\r\n        tempFilterElement.push(\r\n          <label id={'label-' + role + '-' + nodeType} key={nodeType}>\r\n            {nodeType}\r\n            <input type=\"checkbox\" id={'checkbox-' + role + '-' + nodeType}\r\n                   data-role={role} data-node-type={nodeType}\r\n                   checked={this.props.roleFilter[role][nodeType]}\r\n                   onChange={this.handleChange} value={checked}/>\r\n          </label>\r\n        );\r\n      });\r\n      filterElement.push(\r\n        <div id={'div-' + role} key={role}>\r\n          {role}: {tempFilterElement}\r\n        </div>\r\n      );\r\n    });\r\n    if (filterElement.length !== 0) {\r\n      return (\r\n        <form onSubmit={this.props.onSubmit}>\r\n          {filterElement}\r\n          <input type=\"submit\" value=\"Submit\"/>\r\n        </form>\r\n      );\r\n    } else {\r\n      return <div/>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default RoleFilter;","import React from 'react';\r\nimport _ from 'lodash';\r\nimport LogScanner from './LogScanner';\r\nimport RoleFilter from './RoleFilter';\r\nimport * as Token from './Token';\r\n\r\nexport const Start = Symbol('Start');\r\nexport const StartPrime = Symbol('Start\\'');\r\nexport const Block = Symbol('Block');\r\nexport const BlockBegin = Symbol('block-begin');\r\nexport const BlockEnd = Symbol('block-end');\r\nexport const ACC = Symbol('ACC');\r\nexport const Action = Symbol('action');\r\nexport const Command = Symbol('command');\r\nexport const Comment = Symbol('comment');\r\n\r\nclass ParseTreeNode {\r\n  constructor(type, content) {\r\n    this.type = type;\r\n    this.content = content;\r\n    this.children = [];\r\n  }\r\n\r\n  addChild = (node) => { this.children.push(node); };\r\n}\r\n\r\nclass SyntaxTreeNode {\r\n  constructor(id, type, role, content) {\r\n    this.id = id;\r\n    this.type = type;\r\n    this.role = role;\r\n    this.content = content;\r\n    this.children = [];\r\n  }\r\n\r\n  addChild = (node) => { this.children.push(node); };\r\n}\r\n\r\nclass LogParser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedFile: null,\r\n      parseTreeRoot: null,\r\n      syntaxTreeRoot: null,\r\n      roleFilter: {},   // e.g.: {\"role1\": {\"action\": true, \"command\", false, \"comment\": false}, ...}\r\n      outputHTML: '',\r\n    };\r\n    this.handleFileChange = this.handleFileChange.bind(this);\r\n    this.handleFileRead = this.handleFileRead.bind(this);\r\n    this.handleFileUpload = this.handleFileUpload.bind(this);\r\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\r\n  }\r\n\r\n  // syntax:\r\n  //\r\n  // Start -> Block Start' | ACC Start'\r\n  // Start' -> Block Start' | ACC Start' | empty\r\n  // Block -> block-begin Start' block-end\r\n  // ACC -> action | command | comment\r\n  parse(tokenSequence) {\r\n    let tokenIndex = 0;\r\n    const getToken = () => tokenSequence[tokenIndex];\r\n    const nextToken = () => tokenIndex += 1;\r\n\r\n    let parseProgram = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        node.addChild(new ParseTreeNode(Block, null));\r\n        if (parseBlock(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else if (token.type === Token.Action || token.type === Token.Command ||\r\n        token.type === Token.Comment) {\r\n        node.addChild(new ParseTreeNode(ACC, null));\r\n        if (parseACC(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else {\r\n        console.log(`Error parsing at ${token}.`);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    let parseStartPrime = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        node.addChild(new ParseTreeNode(Block, null));\r\n        if (parseBlock(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else if (token.type === Token.Action || token.type === Token.Command ||\r\n        token.type === Token.Comment) {\r\n        node.addChild(new ParseTreeNode(ACC, null));\r\n        if (parseACC(node.children[0])) {\r\n          node.addChild(new ParseTreeNode(StartPrime, null));\r\n          return parseStartPrime(node.children[1]);\r\n        }\r\n      } else {\r\n        return true;    // for Start' -> empty\r\n      }\r\n    };\r\n\r\n    let parseBlock = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.BlockBegin) {\r\n        node.addChild(new ParseTreeNode(BlockBegin, token));\r\n        nextToken();\r\n        node.addChild(new ParseTreeNode(StartPrime, null));\r\n        if (parseStartPrime(node.children[1])) {\r\n          node.addChild(new ParseTreeNode(BlockEnd, getToken()));\r\n          if (getToken().type === Token.BlockEnd) {\r\n            nextToken();\r\n            return true;\r\n          } else {\r\n            console.log(\r\n              `Error parsing at ${getToken()}, should be <block-end>.`);\r\n          }\r\n        }\r\n      } else {\r\n        console.log(`Error parsing at ${getToken()}, should be <block-begin>.`);\r\n      }\r\n    };\r\n\r\n    let parseACC = (node) => {\r\n      let token = getToken();\r\n      if (token.type === Token.Action) {\r\n        node.addChild(new ParseTreeNode(Action, token));\r\n        nextToken();\r\n        return true;\r\n      } else if (token.type === Token.Command) {\r\n        node.addChild(new ParseTreeNode(Command, token));\r\n        nextToken();\r\n        return true;\r\n      } else if (token.type === Token.Comment) {\r\n        node.addChild(new ParseTreeNode(Comment, token));\r\n        nextToken();\r\n        return true;\r\n      } else {\r\n        console.log(\r\n          `Error parsing at ${token}, should be <action> or <command> or <comment>.`);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    let startNode = new ParseTreeNode(Start);\r\n    if (parseProgram(startNode)) {\r\n      return startNode;\r\n    } else {\r\n      console.log('Failed to parse the code.');\r\n    }\r\n  }\r\n\r\n  buildSyntaxTree(rootNode) {\r\n    let nodeID = 1;\r\n    let buildSyntaxTreeNode = (originNode, buildRootNode) => {\r\n      if (originNode.type === Block) {\r\n        buildRootNode.addChild(new SyntaxTreeNode(nodeID, Block, [], null));\r\n      } else if (originNode.type === Action || originNode.type === Command ||\r\n        originNode.type === Comment) {\r\n        buildRootNode.addChild(\r\n          new SyntaxTreeNode(nodeID, originNode.type, originNode.content.role,\r\n            originNode.content.content));\r\n      } else {\r\n        // do nothing\r\n        return false;\r\n      }\r\n      nodeID += 1;\r\n      return buildRootNode.children[buildRootNode.children.length - 1];\r\n    };\r\n\r\n    let buildSyntaxTree = (parseTreeNode, syntaxTreeNode) => {\r\n      if (parseTreeNode) {\r\n        let buildChildNode = buildSyntaxTreeNode(parseTreeNode, syntaxTreeNode);\r\n        if (buildChildNode) {\r\n          parseTreeNode.children.forEach(\r\n            (child, _) => buildSyntaxTree(child, buildChildNode));\r\n        } else {\r\n          parseTreeNode.children.forEach(\r\n            (child, _) => buildSyntaxTree(child, syntaxTreeNode));\r\n        }\r\n      }\r\n    };\r\n\r\n    let syntaxTreeRoot = new SyntaxTreeNode(0, Block, [], null);  // global block containing all roles\r\n    buildSyntaxTree(rootNode, syntaxTreeRoot);\r\n    if (syntaxTreeRoot.children !== []) {\r\n      return syntaxTreeRoot.children[0];\r\n    } else {\r\n      return syntaxTreeRoot;\r\n    }\r\n  }\r\n\r\n  // traverse syntax tree in post order to update \"role\" in Block nodes\r\n  updateRole(rootNode) {\r\n    if (rootNode) {\r\n      if (rootNode.type === Block) {\r\n        let roleArray = rootNode.role;\r\n        rootNode.children.forEach(\r\n          (child, _) => roleArray = roleArray.concat(this.updateRole(child)));\r\n        rootNode.role = [...new Set(roleArray)].sort();\r\n      }\r\n      return rootNode.role;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  initializeRoleFilter() {\r\n    let tempRoleFilter = {};\r\n    this.state.syntaxTreeRoot.role.forEach((role) => {\r\n      tempRoleFilter[role] = {\r\n        'action': true,\r\n        'command': true,\r\n        'comment': true,\r\n      };\r\n    });\r\n    this.setState({roleFilter: tempRoleFilter});\r\n  }\r\n\r\n  handleFileChange(event) {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n    });\r\n  }\r\n\r\n  handleFileRead(event) {\r\n    let content = event.target.result;\r\n    let logScanner = new LogScanner(content);\r\n    let tokenSequence = logScanner.analyze();\r\n    let parseTree = this.parse(tokenSequence);\r\n    let syntaxTree = this.buildSyntaxTree(parseTree);\r\n    this.setState({\r\n      parseTreeRoot: parseTree,\r\n      syntaxTreeRoot: syntaxTree,\r\n      outputHTML: JSON.stringify(syntaxTree, null, 4),\r\n    });\r\n    this.updateRole(this.state.syntaxTreeRoot);\r\n    this.initializeRoleFilter();\r\n  }\r\n\r\n  handleFileUpload(event) {\r\n    event.preventDefault();\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = this.handleFileRead;\r\n    fileReader.readAsText(this.state.selectedFile);\r\n  }\r\n\r\n  handleCheckboxChange(newRoleFilter) {\r\n    this.setState({roleFilter: newRoleFilter});\r\n  }\r\n\r\n  // post-order traversal to delete nodes according to role filter checkboxes\r\n  filterNodeByRole() {\r\n    let filteredTree = _.cloneDeep(this.state.syntaxTreeRoot);\r\n\r\n    let traverseFilter = (node, parentNode) => {\r\n      if (node) {\r\n        // make a clone to prevent wrong index made by deletion in iteration\r\n        node.children.slice(0).forEach((child, _) => traverseFilter(child, node));\r\n        if (node.type === Block && node.children.length === 0 && parentNode) {\r\n          let toDeleteIndex = parentNode.children.findIndex((child) => child.id === node.id);\r\n          parentNode.children.splice(toDeleteIndex, 1);\r\n          node = null;\r\n        } else if (node.type !== Block) {\r\n          // check for filtering action / command / comment\r\n          let typeName = node.type.toString();\r\n          typeName = typeName.substring(7, typeName.length - 1);\r\n          if (!this.state.roleFilter[node.role][typeName]) {\r\n            let toDeleteIndex = parentNode.children.findIndex((child) => child.id === node.id);\r\n            parentNode.children.splice(toDeleteIndex, 1);\r\n            node = null;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    traverseFilter(filteredTree, null);\r\n    this.setState({outputHTML: JSON.stringify(filteredTree, null, 4)});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <input type=\"file\" onChange={this.handleFileChange}/>\r\n          <input type=\"button\" value=\"Upload\" onClick={this.handleFileUpload}/>\r\n        </div>\r\n        <RoleFilter roleFilter={this.state.roleFilter}\r\n                    onChange={this.handleCheckboxChange}\r\n                    onSubmit={(e) => {\r\n                      e.preventDefault();\r\n                      this.filterNodeByRole();\r\n                    }}/>\r\n        <pre id=\"output\"\r\n             dangerouslySetInnerHTML={{__html: this.state.outputHTML}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LogParser;","import LogParser from './LogParser';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>\r\n          es-logger\r\n        </h1>\r\n        <h3>\r\n          A simple logger for CoC.\r\n        </h3>\r\n      </header>\r\n      <LogParser />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}