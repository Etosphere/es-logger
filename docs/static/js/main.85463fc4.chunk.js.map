{"version":3,"sources":["LogScanner.js","LogParser.js","App.js","reportWebVitals.js","index.js"],"names":["LogScanner","rawLogData","this","tokenSequence","makeToken","id","tokenType","role","content","logArray","split","slice","map","str","trim","tokenID","forEach","line","_","trimLine","bracketContent","match","skipBracketContent","length","push","console","log","LogParser","props","state","selectedFile","outputHTML","handleFileChange","bind","handleFileRead","handleFileUpload","event","setState","target","files","result","analyze","JSON","stringify","fileReader","FileReader","onload","readAsText","type","onChange","value","onClick","dangerouslySetInnerHTML","__html","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNA4CeA,E,WA3Cb,WAAYC,GAAa,oBACvBC,KAAKD,WAAaA,EAClBC,KAAKC,cAAgB,G,2CAGvB,WAAW,IAAD,OACFC,EAAY,SAACC,EAAIC,EAAWC,EAAMC,GACtC,MAAO,CACL,GAAMH,EACN,KAAQC,EACR,KAAQC,EACR,QAAWC,IAGXC,EAAWP,KAAKD,WAAWS,MAAM,KAClCC,MAAM,GACNC,KAAI,SAACC,GAAD,MAAS,IAAMA,EAAIC,UACtBC,EAAU,EAsBd,OArBAN,EAASO,SAAQ,SAACC,EAAMC,GACtB,IAAIC,EAAWF,EAAKH,OAChBM,EAAiBD,EAASE,MAAM,QAAQ,GAC5C,GAAID,EAAgB,CAClB,IAAIE,EAAqBF,EAAeT,MAAM,EAC5CS,EAAeG,OAAS,GACC,MAAvBD,EACF,EAAKnB,cAAcqB,KACjBpB,EAAUW,EAAS,cAAe,KAAM,OACV,MAAvBO,EACT,EAAKnB,cAAcqB,KAAKpB,EAAUW,EAAS,YAAa,KAAM,OAE9D,EAAKZ,cAAcqB,KACjBpB,EAAUW,EAAS,SAAUO,EAC3BH,EAAST,MAAM,KAAK,GAAGI,SAE7BC,GAAW,OAEXU,QAAQC,IAAR,oCAAyCT,OAGtCf,KAAKC,kB,YCSDwB,E,kDA7Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,aAAc,KACdzB,GAAI,EACJ0B,WAAY,IAEd,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBATP,E,oDAYnB,SAAiBG,GACflC,KAAKmC,SAAS,CACZP,aAAcM,EAAME,OAAOC,MAAM,O,4BAIrC,SAAeH,GACb,IAAI5B,EAAU4B,EAAME,OAAOE,OAEvBrC,EADa,IAAIH,EAAWQ,GACDiC,UAC/BvC,KAAKmC,SAAS,CAACN,WAAYW,KAAKC,UAAUxC,EAAe,KAAM,O,8BAGjE,WACE,IAAMyC,EAAa,IAAIC,WACvBD,EAAWE,OAAS5C,KAAKgC,eACzBU,EAAWG,WAAW7C,KAAK2B,MAAMC,gB,oBAGnC,WACE,OACE,gCACE,gCACE,uBAAOkB,KAAK,OAAOC,SAAU/C,KAAK8B,mBAClC,uBAAOgB,KAAK,SAASE,MAAM,SAASC,QAASjD,KAAKiC,sBAEpD,qBAAK9B,GAAG,SACH+C,wBAAyB,CAACC,OAAQnD,KAAK2B,MAAME,qB,GAxClCuB,IAAMC,WCefC,MAhBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,2CAGA,6DAIF,cAAC,EAAD,QCDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.85463fc4.chunk.js","sourcesContent":["class LogScanner {\r\n  constructor(rawLogData) {\r\n    this.rawLogData = rawLogData;\r\n    this.tokenSequence = [];\r\n  }\r\n\r\n  analyze() {\r\n    const makeToken = (id, tokenType, role, content) => {\r\n      return {\r\n        'id': id,\r\n        'type': tokenType,\r\n        'role': role,\r\n        'content': content,\r\n      };\r\n    };\r\n    let logArray = this.rawLogData.split('<')\r\n      .slice(1)\r\n      .map((str) => '<' + str.trim());\r\n    let tokenID = 1;      // id 0 is for configuration header\r\n    logArray.forEach((line, _) => {\r\n      let trimLine = line.trim();\r\n      let bracketContent = trimLine.match(/<.+>/)[0];  // <xxx>\r\n      if (bracketContent) {\r\n        let skipBracketContent = bracketContent.slice(1,\r\n          bracketContent.length - 1);  // <xxx> without <>\r\n        if (skipBracketContent === '{') {\r\n          this.tokenSequence.push(\r\n            makeToken(tokenID, 'block-begin', null, null));\r\n        } else if (skipBracketContent === '}') {\r\n          this.tokenSequence.push(makeToken(tokenID, 'block-end', null, null));\r\n        } else {\r\n          this.tokenSequence.push(\r\n            makeToken(tokenID, 'action', skipBracketContent,\r\n              trimLine.split('>')[1].trim()));\r\n        }\r\n        tokenID += 1;\r\n      } else {\r\n        console.log(`Ignore analyzing context: ${line}`);\r\n      }\r\n    });\r\n    return this.tokenSequence;\r\n  }\r\n}\r\n\r\nexport default LogScanner;","import React from 'react';\r\nimport LogScanner from './LogScanner';\r\n\r\nclass LogParser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedFile: null,\r\n      id: 0,\r\n      outputHTML: '',\r\n    };\r\n    this.handleFileChange = this.handleFileChange.bind(this);\r\n    this.handleFileRead = this.handleFileRead.bind(this);\r\n    this.handleFileUpload = this.handleFileUpload.bind(this);\r\n  }\r\n\r\n  handleFileChange(event) {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n    });\r\n  }\r\n\r\n  handleFileRead(event) {\r\n    let content = event.target.result;\r\n    let logScanner = new LogScanner(content);\r\n    let tokenSequence = logScanner.analyze();\r\n    this.setState({outputHTML: JSON.stringify(tokenSequence, null, 2)});\r\n  }\r\n\r\n  handleFileUpload() {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = this.handleFileRead;\r\n    fileReader.readAsText(this.state.selectedFile);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <input type=\"file\" onChange={this.handleFileChange}/>\r\n          <input type=\"button\" value=\"Upload\" onClick={this.handleFileUpload}/>\r\n        </div>\r\n        <pre id=\"output\"\r\n             dangerouslySetInnerHTML={{__html: this.state.outputHTML}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LogParser;","import LogParser from './LogParser';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>\r\n          es-logger\r\n        </h1>\r\n        <h3>\r\n          A simple logger for CoC.\r\n        </h3>\r\n      </header>\r\n      <LogParser />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}